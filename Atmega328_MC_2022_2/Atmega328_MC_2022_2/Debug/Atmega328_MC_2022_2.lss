
Atmega328_MC_2022_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f4  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f2  00000000  00000000  000015b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000210  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  9e:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <power_led_on_off>:
#include <avr/io.h>
#include <util/delay.h>
 
void power_led_on_off(int i)
{
	for (i = 0; i < 6; ++i)
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	0f c0       	rjmp	.+30     	; 0xca <power_led_on_off+0x24>
	{
		PORTB ^= 1 << PINB5; //toggle
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	89 27       	eor	r24, r25
  b2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	4f ef       	ldi	r20, 0xFF	; 255
  b6:	81 ee       	ldi	r24, 0xE1	; 225
  b8:	94 e0       	ldi	r25, 0x04	; 4
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <power_led_on_off+0x14>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <power_led_on_off+0x1e>
  c4:	00 00       	nop
#include <avr/io.h>
#include <util/delay.h>
 
void power_led_on_off(int i)
{
	for (i = 0; i < 6; ++i)
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	26 30       	cpi	r18, 0x06	; 6
  cc:	31 05       	cpc	r19, r1
  ce:	74 f3       	brlt	.-36     	; 0xac <power_led_on_off+0x6>
	{
		PORTB ^= 1 << PINB5; //toggle
		_delay_ms(100);	
	}
	
  d0:	08 95       	ret

000000d2 <main>:
#include "leds.h"
#include "usart.h"

int main(void)
{
	init_ports();
  d2:	0e 94 76 00 	call	0xec	; 0xec <init_ports>
	power_led_on_off();
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <power_led_on_off>
	init_usart(207);
  da:	8f ec       	ldi	r24, 0xCF	; 207
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 c7 00 	call	0x18e	; 0x18e <init_usart>
	usart_transmit_string("Hola Jesus...");
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 ae 00 	call	0x15c	; 0x15c <usart_transmit_string>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x18>

000000ec <init_ports>:
#include <avr/io.h>

void init_ports(void)
{
	//assign pin power-led
	DDRB |= 1 << PINB5;
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	84 b9       	out	0x04, r24	; 4
  f2:	08 95       	ret

000000f4 <usart_transmit>:
/*
* Transmite el dato que se pasa como argumento
*/
void usart_transmit( uint8_t data )
{
  while ((UCSR0A & 0x20) == 0x00);  // Espera hasta que el buffer del transmisor está vacío (UDRE=1)
  f4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f8:	95 ff       	sbrs	r25, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <usart_transmit>
  UDR0 = data; // Cuando el buffer está vacío, coloca el dato en el registro UDR
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 100:	08 95       	ret

00000102 <__vector_18>:

/*
* Rutina de atención a las interrupciones del USART
*/
ISR (USART_RX_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	USART_received_char=UDR0;
 124:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 128:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	usart_transmit(0x40); //Transmite una "A" y luego el caracter tecleado
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <usart_transmit>
	usart_transmit(USART_received_char);
 132:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 136:	0e 94 7a 00 	call	0xf4	; 0xf4 <usart_transmit>
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <usart_transmit_string>:

/*
	Transmite una cadena de caracteres
*/
void usart_transmit_string( char s[] )
{	
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	8c 01       	movw	r16, r24
	int i = 0;
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
  while (i < 64)
 16a:	09 c0       	rjmp	.+18     	; 0x17e <usart_transmit_string+0x22>
  {
	  if (s[i] == '\0') break;
 16c:	f8 01       	movw	r30, r16
 16e:	ec 0f       	add	r30, r28
 170:	fd 1f       	adc	r31, r29
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	31 f0       	breq	.+12     	; 0x184 <usart_transmit_string+0x28>
	  usart_transmit(s[i++]);
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	0e 94 7a 00 	call	0xf4	; 0xf4 <usart_transmit>
	Transmite una cadena de caracteres
*/
void usart_transmit_string( char s[] )
{	
	int i = 0;
  while (i < 64)
 17e:	c0 34       	cpi	r28, 0x40	; 64
 180:	d1 05       	cpc	r29, r1
 182:	a4 f3       	brlt	.-24     	; 0x16c <usart_transmit_string+0x10>
  {
	  if (s[i] == '\0') break;
	  usart_transmit(s[i++]);
  }
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <init_usart>:
* Entrada: valor de UBRR de las tablas(datasheet)de BAUDRATE
*/
void init_usart(unsigned int baudrate)
{
	//Escoge modo de reloj: UMSEL=0 asíncrono, UMSEL=1 síncrono
	UCSR0C &= (~(1<<UMSEL00) & ~(1<<UMSEL01)); // bit UMSEL = 0 asíncrono
 18e:	e2 ec       	ldi	r30, 0xC2	; 194
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	20 81       	ld	r18, Z
 194:	2f 73       	andi	r18, 0x3F	; 63
 196:	20 83       	st	Z, r18
	
	//En modo asíncrono escoge la velocidad: U2X=0 normal, U2X=1 doble
	UCSR0A = (1<<U2X0); // bit U2X = 1 doble
 198:	22 e0       	ldi	r18, 0x02	; 2
 19a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Baudrate ejemplo: fosc = 16 Mhz, U2Xn= 1, BaudRate = 9600, entonces UBRR= 207
	//Ver DataSheet pag.153
	UBRR0H = (unsigned char) (baudrate>>8); // Escribe (MSB) en la parte alta del registro
 19e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (baudrate); //Escribe (LSB) el valor en la parte baja
 1a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Tamaño de los datos
	UCSR0C = ((1<<UCSZ00) | (1<<UCSZ01)); //Selecciona registro,8 bits para longitud de datos
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	80 83       	st	Z, r24
	
	//Habilitar el transmisor y receptor
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 1aa:	e1 ec       	ldi	r30, 0xC1	; 193
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	88 e1       	ldi	r24, 0x18	; 24
 1b0:	80 83       	st	Z, r24
	
	//Habilita 2 bits de paro
	//UCSRC = (1<<USBS);
	
	sei(); //Activa interrupciones generales
 1b2:	78 94       	sei
	//Para activar/desactivar las interrupcines, sólo quitar/poner el símbolo de comentarios
	UCSR0B |= (1<<RXCIE0);	//Activa interrupciones de "recepción completada" (RXCIE=1)
 1b4:	80 81       	ld	r24, Z
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 83       	st	Z, r24
 1ba:	08 95       	ret

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
