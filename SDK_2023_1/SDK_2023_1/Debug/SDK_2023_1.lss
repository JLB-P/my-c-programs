
SDK_2023_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000862  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000723  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035c  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000018eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <led_on_off>:
#include <avr/io.h>
#include <avr/delay.h>

void led_on_off(void)
{
	PORTB &= 0 << PB5;
  80:	85 b1       	in	r24, 0x05	; 5
  82:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	81 ee       	ldi	r24, 0xE1	; 225
  88:	94 e0       	ldi	r25, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <led_on_off+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <led_on_off+0x14>
  94:	00 00       	nop
	_delay_ms(100);
	PORTB |= 1 << PB5;
  96:	85 b1       	in	r24, 0x05	; 5
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	81 ee       	ldi	r24, 0xE1	; 225
  a0:	94 e0       	ldi	r25, 0x04	; 4
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <led_on_off+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <led_on_off+0x2c>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <main>:
#include "ports.h"
#include "leds.h"

int main(void)
{
	init_ports();
  b0:	0e 94 5d 00 	call	0xba	; 0xba <init_ports>
	
    /* Replace with your application code */
    while (1) 
    {
		led_on_off();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <led_on_off>
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x4>

000000ba <init_ports>:
#include <avr/io.h>

void init_ports(void)
{
	//LED Power on
	DDRB |= 1 << PB5;
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1 << PB5;
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
