
SDK_Atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d35  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a2  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000606  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000453  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  8e:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_ports>:
 */ 
#include <avr/io.h>
void init_ports (void)
{
	// Define puerto B-->salida
	DDRB = 0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
  9a:	08 95       	ret

0000009c <lcd_reset>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	89 ef       	ldi	r24, 0xF9	; 249
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <lcd_reset+0xa>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_reset+0x14>
  b0:	00 00       	nop
  b2:	94 e3       	ldi	r25, 0x34	; 52
  b4:	95 b9       	out	0x05, r25	; 5
  b6:	80 e3       	ldi	r24, 0x30	; 48
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	ef e3       	ldi	r30, 0x3F	; 63
  bc:	fc e9       	ldi	r31, 0x9C	; 156
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_reset+0x22>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_reset+0x28>
  c4:	00 00       	nop
  c6:	95 b9       	out	0x05, r25	; 5
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	ef e9       	ldi	r30, 0x9F	; 159
  cc:	ff e0       	ldi	r31, 0x0F	; 15
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_reset+0x32>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_reset+0x38>
  d4:	00 00       	nop
  d6:	95 b9       	out	0x05, r25	; 5
  d8:	85 b9       	out	0x05, r24	; 5
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_reset+0x42>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_reset+0x48>
  e4:	00 00       	nop
  e6:	84 e2       	ldi	r24, 0x24	; 36
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	ef e9       	ldi	r30, 0x9F	; 159
  f0:	ff e0       	ldi	r31, 0x0F	; 15
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_reset+0x56>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_reset+0x5c>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <lcd_cmd>:
  fc:	98 2f       	mov	r25, r24
  fe:	90 7f       	andi	r25, 0xF0	; 240
 100:	29 2f       	mov	r18, r25
 102:	24 60       	ori	r18, 0x04	; 4
 104:	25 b9       	out	0x05, r18	; 5
 106:	95 b9       	out	0x05, r25	; 5
 108:	20 e1       	ldi	r18, 0x10	; 16
 10a:	82 9f       	mul	r24, r18
 10c:	c0 01       	movw	r24, r0
 10e:	11 24       	eor	r1, r1
 110:	98 2f       	mov	r25, r24
 112:	94 60       	ori	r25, 0x04	; 4
 114:	95 b9       	out	0x05, r25	; 5
 116:	85 b9       	out	0x05, r24	; 5
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9f e1       	ldi	r25, 0x1F	; 31
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_cmd+0x20>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_cmd+0x26>
 122:	00 00       	nop
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_cmd+0x2c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_cmd+0x32>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcd_init>:
 132:	0e 94 4e 00 	call	0x9c	; 0x9c <lcd_reset>
 136:	8c e2       	ldi	r24, 0x2C	; 44
 138:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd>
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd>
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd>
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd>
 14e:	08 95       	ret

00000150 <lcd_data>:
 150:	98 2f       	mov	r25, r24
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	29 2f       	mov	r18, r25
 156:	25 60       	ori	r18, 0x05	; 5
 158:	25 b9       	out	0x05, r18	; 5
 15a:	91 60       	ori	r25, 0x01	; 1
 15c:	95 b9       	out	0x05, r25	; 5
 15e:	20 e1       	ldi	r18, 0x10	; 16
 160:	82 9f       	mul	r24, r18
 162:	c0 01       	movw	r24, r0
 164:	11 24       	eor	r1, r1
 166:	98 2f       	mov	r25, r24
 168:	95 60       	ori	r25, 0x05	; 5
 16a:	95 b9       	out	0x05, r25	; 5
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	85 b9       	out	0x05, r24	; 5
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	9f e1       	ldi	r25, 0x1F	; 31
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_data+0x24>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_data+0x2a>
 17a:	00 00       	nop
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9f e1       	ldi	r25, 0x1F	; 31
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_data+0x30>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_data+0x36>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <lcd_col_row>:
 18a:	e6 2f       	mov	r30, r22
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e1 50       	subi	r30, 0x01	; 1
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	90 81       	ld	r25, Z
 194:	89 0f       	add	r24, r25
 196:	81 58       	subi	r24, 0x81	; 129
 198:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cmd>
 19c:	08 95       	ret

0000019e <lcd_write_string>:
*	Despliega una cadena de caracteres
*	Entrada: Cadena de caracteres entre comillas (p.e. "Hola LCD..")
*	Salida: Ninguna
*********************************************************/
void lcd_write_string(char *a)
{
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <lcd_write_string+0x16>
	lcd_data(a[i]);
 1ae:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_data>
*	Salida: Ninguna
*********************************************************/
void lcd_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	f8 01       	movw	r30, r16
 1b6:	ec 0f       	add	r30, r28
 1b8:	fd 1f       	adc	r31, r29
 1ba:	80 81       	ld	r24, Z
 1bc:	81 11       	cpse	r24, r1
 1be:	f7 cf       	rjmp	.-18     	; 0x1ae <lcd_write_string+0x10>
	lcd_data(a[i]);
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <power_on>:

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <power_on+0x24>
	{
		PORTB ^= 1 << PB5; //toggle led
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	89 27       	eor	r24, r25
 1d6:	85 b9       	out	0x05, r24	; 5
 1d8:	4f ef       	ldi	r20, 0xFF	; 255
 1da:	81 ee       	ldi	r24, 0xE1	; 225
 1dc:	94 e0       	ldi	r25, 0x04	; 4
 1de:	41 50       	subi	r20, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <power_on+0x14>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <power_on+0x1e>
 1e8:	00 00       	nop

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	25 30       	cpi	r18, 0x05	; 5
 1f0:	31 05       	cpc	r19, r1
 1f2:	74 f3       	brlt	.-36     	; 0x1d0 <power_on+0x6>
	{
		PORTB ^= 1 << PB5; //toggle led
		_delay_ms(100);
	}
 1f4:	08 95       	ret

000001f6 <main>:


int main(void)
{
    /* Replace with your application code */
	init_ports();
 1f6:	0e 94 4b 00 	call	0x96	; 0x96 <init_ports>
	power_on(); //LED para indicar que el programa esta funcionando en arduino
 1fa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <power_on>
	/************************************************************************
	* uso del lcd en modo de 4 bits
	************************************************************************/
	lcd_init();
 1fe:	0e 94 99 00 	call	0x132	; 0x132 <lcd_init>
	lcd_col_row(3,1);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_col_row>
	lcd_write_string("hola lcd");
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write_string>
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0x1c>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
