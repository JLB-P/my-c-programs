
SDK_Atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000bd8  00000c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001aa5  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e3f  00000000  00000000  00002939  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec9  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00004644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057a  00000000  00000000  000049f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d68  00000000  00000000  00004f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00005cd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_1>
   8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
   c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  10:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  14:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  18:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  1c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  20:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  24:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  28:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  30:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  34:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  38:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  3c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  44:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  4c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  50:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  54:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_21>
  58:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_23>
  60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__ftoa_engine+0xc>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__udivmodhi4_loop+0xc>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <lcd_i2c_cmd+0x18>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <__bad_interrupt>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <__vector_21+0x3e>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e8 ed       	ldi	r30, 0xD8	; 216
 176:	fb e0       	ldi	r31, 0x0B	; 11
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	ae 32       	cpi	r26, 0x2E	; 46
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>
 184:	0e 94 8b 02 	call	0x516	; 0x516 <main>
 188:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_exit>

0000018c <__bad_interrupt>:
 18c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000190 <__vector_21>:
* USO DEL ADC CON INTERRUPCIONES
************************************************************************/

/***Rutina de atención a las interrupciones del convertidor***/
ISR (ADC_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2a 97       	sbiw	r28, 0x0a	; 10
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	cd bf       	out	0x3d, r28	; 61
	uint8_t LowPart = ADCL;	//10-bit resolution
 1c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH << 2 | LowPart >> 6; //10-bit resolution
 1c8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	82 95       	swap	r24
 1d8:	86 95       	lsr	r24
 1da:	86 95       	lsr	r24
 1dc:	83 70       	andi	r24, 0x03	; 3
 1de:	28 2b       	or	r18, r24
	
	/***Ejemplo de termómetro digital para salida en LCD***/
	char ascii_temp [10];
	float temp = (TenBitResult*150/307);//Conversión a grados C
 1e0:	46 e9       	ldi	r20, 0x96	; 150
 1e2:	42 9f       	mul	r20, r18
 1e4:	c0 01       	movw	r24, r0
 1e6:	43 9f       	mul	r20, r19
 1e8:	90 0d       	add	r25, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	63 e3       	ldi	r22, 0x33	; 51
 1ee:	71 e0       	ldi	r23, 0x01	; 1
 1f0:	0e 94 4d 03 	call	0x69a	; 0x69a <__udivmodhi4>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 10 03 	call	0x620	; 0x620 <__floatunsisf>
	//El LM35 entrega 1.5v cuando mide 150 grados
	//Por lo tanto: 5v   -> 1023
	//				1.5v -> x
	// x=((1.5v)*(1023))/5v=306.9
	dtostrf(temp, 4, 1, ascii_temp);	//4 es la cantidad de enteros,
 1fc:	8e 01       	movw	r16, r28
 1fe:	0f 5f       	subi	r16, 0xFF	; 255
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	44 e0       	ldi	r20, 0x04	; 4
 206:	0e 94 61 03 	call	0x6c2	; 0x6c2 <dtostrf>
										//1 es la cantidad de decimales										
	// Despliega los valores de las muestras del ADC al LCD
	lcd_i2c_col_row(9,1);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 41 02 	call	0x482	; 0x482 <lcd_i2c_col_row>
	lcd_i2c_write_string(ascii_temp);
 212:	c8 01       	movw	r24, r16
 214:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_i2c_write_string>
	lcd_i2c_data(0xDF); //Caracter para indicar grados
 218:	8f ed       	ldi	r24, 0xDF	; 223
 21a:	0e 94 12 02 	call	0x424	; 0x424 <lcd_i2c_data>
	lcd_i2c_write_string("C");
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_i2c_write_string>
	//Comenzar otra conversion
	ADCSRA |= 1<<ADSC;
 226:	ea e7       	ldi	r30, 0x7A	; 122
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 83       	st	Z, r24
}
 230:	2a 96       	adiw	r28, 0x0a	; 10
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_23>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
 288:	11 c0       	rjmp	.+34     	; 0x2ac <__vector_23+0x46>
	//Realiza esta operación mientras voltaje de entrada > voltaje de referencia
	{
		lcd_i2c_col_row(1,2);
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 41 02 	call	0x482	; 0x482 <lcd_i2c_col_row>
		lcd_i2c_write_string("Comparando...");
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_i2c_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	83 ec       	ldi	r24, 0xC3	; 195
 29e:	99 e0       	ldi	r25, 0x09	; 9
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <__vector_23+0x3a>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <__vector_23+0x44>
 2aa:	00 00       	nop
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
 2ac:	00 b6       	in	r0, 0x30	; 48
 2ae:	05 fc       	sbrc	r0, 5
 2b0:	ec cf       	rjmp	.-40     	; 0x28a <__vector_23+0x24>
	{
		lcd_i2c_col_row(1,2);
		lcd_i2c_write_string("Comparando...");
		_delay_ms(200);
	}
	lcd_i2c_col_row(1,2);
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 41 02 	call	0x482	; 0x482 <lcd_i2c_col_row>
	lcd_i2c_write_string("             ");
 2ba:	82 e1       	ldi	r24, 0x12	; 18
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_i2c_write_string>
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
 2e4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
 2e8:	84 e1       	ldi	r24, 0x14	; 20
 2ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f4:	08 95       	ret

000002f6 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
 2f6:	84 ea       	ldi	r24, 0xA4	; 164
 2f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 2fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 300:	88 23       	and	r24, r24
 302:	e4 f7       	brge	.-8      	; 0x2fc <start+0x6>
}
 304:	08 95       	ret

00000306 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
 306:	84 e9       	ldi	r24, 0x94	; 148
 308:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 30c:	8f e9       	ldi	r24, 0x9F	; 159
 30e:	9f e0       	ldi	r25, 0x0F	; 15
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <stop+0xa>
 314:	00 c0       	rjmp	.+0      	; 0x316 <stop+0x10>
 316:	00 00       	nop
 318:	08 95       	ret

0000031a <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte a escribir
 31a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
 31e:	84 ec       	ldi	r24, 0xC4	; 196
 320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 324:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 328:	88 23       	and	r24, r24
 32a:	e4 f7       	brge	.-8      	; 0x324 <write_i2c+0xa>
}
 32c:	08 95       	ret

0000032e <read_i2c>:

uint8_t read_i2c()
{
	TWCR = (1<<TWINT)|(1<<TWEN); //Lectura sin reconocimiento (TWEA=0)
 32e:	84 e8       	ldi	r24, 0x84	; 132
 330:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 334:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 338:	88 23       	and	r24, r24
 33a:	e4 f7       	brge	.-8      	; 0x334 <read_i2c+0x6>
	return TWDR; //Regresa el valor leído
 33c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 340:	08 95       	ret

00000342 <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(INT0_vect)
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	lcd_i2c_col_row(3,2);
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 41 02 	call	0x482	; 0x482 <lcd_i2c_col_row>
	lcd_i2c_write_string("recibe INT0 ");
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_i2c_write_string>
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	81 ee       	ldi	r24, 0xE1	; 225
 378:	94 e0       	ldi	r25, 0x04	; 4
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <__vector_1+0x38>
 382:	00 c0       	rjmp	.+0      	; 0x384 <__vector_1+0x42>
 384:	00 00       	nop
	_delay_ms(100);
	lcd_i2c_clr();
 386:	0e 94 4b 02 	call	0x496	; 0x496 <lcd_i2c_clr>
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <init_ports>:
 */ 
#include <avr/io.h>
void init_ports (void)
{
	// Define puerto B-->salida
	DDRB = 0xff;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	84 b9       	out	0x04, r24	; 4
		PB4			
		PB5			Power on LED
		PB6			
		PB7			
	*/
	DDRD &= 0 << PD2; //entrada de interrupci[on externa
 3b0:	8a b1       	in	r24, 0x0a	; 10
 3b2:	1a b8       	out	0x0a, r1	; 10
	PORTD |= 1 << PD2; //activa resistencia de PullUp.
 3b4:	8b b1       	in	r24, 0x0b	; 11
 3b6:	84 60       	ori	r24, 0x04	; 4
 3b8:	8b b9       	out	0x0b, r24	; 11
	
	// Salidas para interfaz a 2 hilos TWI
	DDRC|=(1<<PC4)|(1<<PC5);	// Como salida SDA y SCL
 3ba:	87 b1       	in	r24, 0x07	; 7
 3bc:	80 63       	ori	r24, 0x30	; 48
 3be:	87 b9       	out	0x07, r24	; 7
	PORTC|=(1<<PC4)|(1<<PC5);	// SDA y SCL con pull up.
 3c0:	88 b1       	in	r24, 0x08	; 8
 3c2:	80 63       	ori	r24, 0x30	; 48
 3c4:	88 b9       	out	0x08, r24	; 8
 3c6:	08 95       	ret

000003c8 <lcd_i2c_cmd>:
	
	lcd_i2c_cmd(0x2C);		// Function Set: Modo 4 bits, 2 líneas, resolución 5×10.
	//lcd_i2c_cmd(0x0F);      // Display control: LCD encendido, cursor encendido, parpadeo.
	lcd_i2c_cmd(0x0C);		//Cursor apagado.
	lcd_i2c_cmd(0x06);      // Entry mode: Increment.
	lcd_i2c_cmd(0x80);      // Apunta a la dirección de la DDRAM.
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	c8 2f       	mov	r28, r24
 3ce:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <start>
 3d2:	80 e7       	ldi	r24, 0x70	; 112
 3d4:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
 3d8:	dc 2f       	mov	r29, r28
 3da:	d0 7f       	andi	r29, 0xF0	; 240
 3dc:	8d 2f       	mov	r24, r29
 3de:	8c 60       	ori	r24, 0x0C	; 12
 3e0:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
 3e4:	8d 2f       	mov	r24, r29
 3e6:	88 60       	ori	r24, 0x08	; 8
 3e8:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
 3ec:	80 e1       	ldi	r24, 0x10	; 16
 3ee:	c8 9f       	mul	r28, r24
 3f0:	e0 01       	movw	r28, r0
 3f2:	11 24       	eor	r1, r1
 3f4:	8c 2f       	mov	r24, r28
 3f6:	8c 60       	ori	r24, 0x0C	; 12
 3f8:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
 3fc:	8c 2f       	mov	r24, r28
 3fe:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
 402:	0e 94 83 01 	call	0x306	; 0x306 <stop>
 406:	8f e3       	ldi	r24, 0x3F	; 63
 408:	9f e1       	ldi	r25, 0x1F	; 31
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	8f e3       	ldi	r24, 0x3F	; 63
 414:	9f e1       	ldi	r25, 0x1F	; 31
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <lcd_i2c_data>:
*	Función que despliega un solo caracter
*	Entrada: caracter entre comillas sencillas (p.e. 'A')
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_data (unsigned char dat)
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	c8 2f       	mov	r28, r24
	unsigned char data;
	start();
 42a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <start>
	write_i2c(PCF8574_ADDR);
 42e:	80 e7       	ldi	r24, 0x70	; 112
 430:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>

	data=((dat & 0xF0)|LCD_EN|LCD_RS|LUZ_FONDO);
 434:	dc 2f       	mov	r29, r28
 436:	d0 7f       	andi	r29, 0xF0	; 240
	write_i2c(data);
 438:	8d 2f       	mov	r24, r29
 43a:	8d 60       	ori	r24, 0x0D	; 13
 43c:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>

	data=((dat & 0xF0)|LCD_RS|LUZ_FONDO);
	write_i2c(data);
 440:	8d 2f       	mov	r24, r29
 442:	89 60       	ori	r24, 0x09	; 9
 444:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>

	data=(((dat << 4) & 0xF0)|LCD_EN|LCD_RS|LUZ_FONDO);
 448:	80 e1       	ldi	r24, 0x10	; 16
 44a:	c8 9f       	mul	r28, r24
 44c:	e0 01       	movw	r28, r0
 44e:	11 24       	eor	r1, r1
	write_i2c(data);
 450:	8c 2f       	mov	r24, r28
 452:	8d 60       	ori	r24, 0x0D	; 13
 454:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>

	data=(((dat << 4) & 0xF0)|LCD_RS|LUZ_FONDO);
	write_i2c(data);
 458:	8c 2f       	mov	r24, r28
 45a:	89 60       	ori	r24, 0x09	; 9
 45c:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>

	stop();
 460:	0e 94 83 01 	call	0x306	; 0x306 <stop>
 464:	8f e3       	ldi	r24, 0x3F	; 63
 466:	9f e1       	ldi	r25, 0x1F	; 31
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <lcd_i2c_data+0x44>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <lcd_i2c_data+0x4a>
 46e:	00 00       	nop
 470:	8f e3       	ldi	r24, 0x3F	; 63
 472:	9f e1       	ldi	r25, 0x1F	; 31
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <lcd_i2c_data+0x50>
 478:	00 c0       	rjmp	.+0      	; 0x47a <lcd_i2c_data+0x56>
 47a:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <lcd_i2c_col_row>:
*	Entrada: Columna y Renglón (1,1)
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_col_row(uint8_t x, uint8_t y)
{
	lcd_i2c_cmd(0x80 + Columna_1[y-1]+(x-1));
 482:	e6 2f       	mov	r30, r22
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	e1 50       	subi	r30, 0x01	; 1
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	90 81       	ld	r25, Z
 48c:	89 0f       	add	r24, r25
 48e:	81 58       	subi	r24, 0x81	; 129
 490:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_i2c_cmd>
 494:	08 95       	ret

00000496 <lcd_i2c_clr>:
*	Entrada: Nada
*	Salida: Nada
*********************************************************/
void lcd_i2c_clr(void)
{
	lcd_i2c_cmd(0x01); //Limpia la pantalla (0000 0001)
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_i2c_cmd>
 49c:	8f e3       	ldi	r24, 0x3F	; 63
 49e:	9f e1       	ldi	r25, 0x1F	; 31
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <lcd_i2c_clr+0xa>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <lcd_i2c_clr+0x10>
 4a6:	00 00       	nop
 4a8:	08 95       	ret

000004aa <lcd_i2c_write_string>:
*	Despliega una cadena de caracteres
*	Entrada: Cadena de caracteres entre comillas (p.e. "Hola LCD..")
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 4ba:	0e 94 12 02 	call	0x424	; 0x424 <lcd_i2c_data>
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 4be:	21 96       	adiw	r28, 0x01	; 1
 4c0:	f8 01       	movw	r30, r16
 4c2:	ec 0f       	add	r30, r28
 4c4:	fd 1f       	adc	r31, r29
 4c6:	80 81       	ld	r24, Z
 4c8:	81 11       	cpse	r24, r1
 4ca:	f7 cf       	rjmp	.-18     	; 0x4ba <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

000004d6 <power_on>:

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	19 c0       	rjmp	.+50     	; 0x50e <power_on+0x38>
	{
		PORTB &= 0 << PB5; //Led on
 4dc:	85 b1       	in	r24, 0x05	; 5
 4de:	15 b8       	out	0x05, r1	; 5
 4e0:	4f ef       	ldi	r20, 0xFF	; 255
 4e2:	81 ee       	ldi	r24, 0xE1	; 225
 4e4:	94 e0       	ldi	r25, 0x04	; 4
 4e6:	41 50       	subi	r20, 0x01	; 1
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	90 40       	sbci	r25, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <power_on+0x10>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <power_on+0x1a>
 4f0:	00 00       	nop
		_delay_ms(100);
		PORTB |= 1 << PB5; //Led off
 4f2:	85 b1       	in	r24, 0x05	; 5
 4f4:	80 62       	ori	r24, 0x20	; 32
 4f6:	85 b9       	out	0x05, r24	; 5
 4f8:	4f ef       	ldi	r20, 0xFF	; 255
 4fa:	81 ee       	ldi	r24, 0xE1	; 225
 4fc:	94 e0       	ldi	r25, 0x04	; 4
 4fe:	41 50       	subi	r20, 0x01	; 1
 500:	80 40       	sbci	r24, 0x00	; 0
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <power_on+0x28>
 506:	00 c0       	rjmp	.+0      	; 0x508 <power_on+0x32>
 508:	00 00       	nop

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 50a:	2f 5f       	subi	r18, 0xFF	; 255
 50c:	3f 4f       	sbci	r19, 0xFF	; 255
 50e:	25 30       	cpi	r18, 0x05	; 5
 510:	31 05       	cpc	r19, r1
 512:	24 f3       	brlt	.-56     	; 0x4dc <power_on+0x6>
		PORTB &= 0 << PB5; //Led on
		_delay_ms(100);
		PORTB |= 1 << PB5; //Led off
		_delay_ms(100);
	}
 514:	08 95       	ret

00000516 <main>:

int main(void)
{
    /* Replace with your application code */

	init_ports();
 516:	0e 94 d6 01 	call	0x3ac	; 0x3ac <init_ports>
	
	power_on(); //LED para indicar que el programa esta funcionando
 51a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <power_on>
// 	lcd_i2c_write_string("TEMP:");
//	ADC_WithInterrupt();
	/************************************************************************
	* USO DEL RTC CON I2C
	************************************************************************/
	rtc_example();
 51e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <rtc_example>
 522:	ff cf       	rjmp	.-2      	; 0x522 <main+0xc>

00000524 <rtc_write>:
#include <util/delay.h>
#include <avr/io.h>
#include "I2C.h"

void rtc_write(uint8_t dev_addr,uint8_t dev_loc,uint8_t dev_data)
{
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	18 2f       	mov	r17, r24
 52c:	d6 2f       	mov	r29, r22
 52e:	c4 2f       	mov	r28, r20
	start();
 530:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <start>
	write_i2c(dev_addr);
 534:	81 2f       	mov	r24, r17
 536:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
	write_i2c(dev_loc);
 53a:	8d 2f       	mov	r24, r29
 53c:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
	write_i2c(dev_data);
 540:	8c 2f       	mov	r24, r28
 542:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
	stop();
 546:	0e 94 83 01 	call	0x306	; 0x306 <stop>
 54a:	8f e3       	ldi	r24, 0x3F	; 63
 54c:	9c e9       	ldi	r25, 0x9C	; 156
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <rtc_write+0x2a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <rtc_write+0x30>
 554:	00 00       	nop
	_delay_ms(10);
}
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	08 95       	ret

0000055e <rtc_read>:

uint8_t rtc_read(uint8_t dev_addr,uint8_t dev_loc)
{
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	c8 2f       	mov	r28, r24
 564:	d6 2f       	mov	r29, r22
	uint8_t ch;

	start();
 566:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <start>

	write_i2c(dev_addr);
 56a:	8c 2f       	mov	r24, r28
 56c:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
	write_i2c(dev_loc);
 570:	8d 2f       	mov	r24, r29
 572:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>

	start();
 576:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <start>
	write_i2c(dev_addr|0x01);
 57a:	8c 2f       	mov	r24, r28
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	0e 94 8d 01 	call	0x31a	; 0x31a <write_i2c>
	ch = read_i2c();
 582:	0e 94 97 01 	call	0x32e	; 0x32e <read_i2c>
 586:	c8 2f       	mov	r28, r24

	stop();
 588:	0e 94 83 01 	call	0x306	; 0x306 <stop>
	return ch;
}
 58c:	8c 2f       	mov	r24, r28
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <disp_time_date>:

void disp_time_date()
{
	uint8_t ch;

	ch = rtc_read(0xd0 , 0x02);
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	80 ed       	ldi	r24, 0xD0	; 208
 598:	0e 94 af 02 	call	0x55e	; 0x55e <rtc_read>
	ch = rtc_read(0xd0 , 0x01);
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	80 ed       	ldi	r24, 0xD0	; 208
 5a0:	0e 94 af 02 	call	0x55e	; 0x55e <rtc_read>
	ch = rtc_read(0xd0 , 0x00);
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	80 ed       	ldi	r24, 0xD0	; 208
 5a8:	0e 94 af 02 	call	0x55e	; 0x55e <rtc_read>
	ch = rtc_read(0xd0 , 0x04);
 5ac:	64 e0       	ldi	r22, 0x04	; 4
 5ae:	80 ed       	ldi	r24, 0xD0	; 208
 5b0:	0e 94 af 02 	call	0x55e	; 0x55e <rtc_read>
	ch = rtc_read(0xd0 , 0x05);
 5b4:	65 e0       	ldi	r22, 0x05	; 5
 5b6:	80 ed       	ldi	r24, 0xD0	; 208
 5b8:	0e 94 af 02 	call	0x55e	; 0x55e <rtc_read>
	ch = rtc_read(0xd0 , 0x06);
 5bc:	66 e0       	ldi	r22, 0x06	; 6
 5be:	80 ed       	ldi	r24, 0xD0	; 208
 5c0:	0e 94 af 02 	call	0x55e	; 0x55e <rtc_read>
 5c4:	08 95       	ret

000005c6 <rtc_example>:

}

int rtc_example()
{
	init_i2c();
 5c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <init_i2c>
	//Ajusta tiempo
	rtc_write(0xd0,0x00,0x00); //Segundos
 5ca:	40 e0       	ldi	r20, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	80 ed       	ldi	r24, 0xD0	; 208
 5d0:	0e 94 92 02 	call	0x524	; 0x524 <rtc_write>
	rtc_write(0xd0,0x01,0x19); //Minutos
 5d4:	49 e1       	ldi	r20, 0x19	; 25
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	80 ed       	ldi	r24, 0xD0	; 208
 5da:	0e 94 92 02 	call	0x524	; 0x524 <rtc_write>
	rtc_write(0xd0,0x02,0x12); //horas
 5de:	42 e1       	ldi	r20, 0x12	; 18
 5e0:	62 e0       	ldi	r22, 0x02	; 2
 5e2:	80 ed       	ldi	r24, 0xD0	; 208
 5e4:	0e 94 92 02 	call	0x524	; 0x524 <rtc_write>
	//Ajusta fecha
	rtc_write(0xd0,0x04,0x22); //Día
 5e8:	42 e2       	ldi	r20, 0x22	; 34
 5ea:	64 e0       	ldi	r22, 0x04	; 4
 5ec:	80 ed       	ldi	r24, 0xD0	; 208
 5ee:	0e 94 92 02 	call	0x524	; 0x524 <rtc_write>
	rtc_write(0xd0,0x05,0x12); //Mes
 5f2:	42 e1       	ldi	r20, 0x12	; 18
 5f4:	65 e0       	ldi	r22, 0x05	; 5
 5f6:	80 ed       	ldi	r24, 0xD0	; 208
 5f8:	0e 94 92 02 	call	0x524	; 0x524 <rtc_write>
	rtc_write(0xd0,0x06,0x21); //Año
 5fc:	41 e2       	ldi	r20, 0x21	; 33
 5fe:	66 e0       	ldi	r22, 0x06	; 6
 600:	80 ed       	ldi	r24, 0xD0	; 208
 602:	0e 94 92 02 	call	0x524	; 0x524 <rtc_write>
 606:	2a ea       	ldi	r18, 0xAA	; 170
 608:	36 ee       	ldi	r19, 0xE6	; 230
 60a:	86 e9       	ldi	r24, 0x96	; 150
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	21 50       	subi	r18, 0x01	; 1
 610:	30 40       	sbci	r19, 0x00	; 0
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	d9 f7       	brne	.-10     	; 0x60e <rtc_example+0x48>
 618:	00 00       	nop

	_delay_ms(10000);

	while(1)
	{
		disp_time_date();
 61a:	0e 94 ca 02 	call	0x594	; 0x594 <disp_time_date>
 61e:	fd cf       	rjmp	.-6      	; 0x61a <rtc_example+0x54>

00000620 <__floatunsisf>:
 620:	e8 94       	clt
 622:	09 c0       	rjmp	.+18     	; 0x636 <__floatsisf+0x12>

00000624 <__floatsisf>:
 624:	97 fb       	bst	r25, 7
 626:	3e f4       	brtc	.+14     	; 0x636 <__floatsisf+0x12>
 628:	90 95       	com	r25
 62a:	80 95       	com	r24
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	99 23       	and	r25, r25
 638:	a9 f0       	breq	.+42     	; 0x664 <__floatsisf+0x40>
 63a:	f9 2f       	mov	r31, r25
 63c:	96 e9       	ldi	r25, 0x96	; 150
 63e:	bb 27       	eor	r27, r27
 640:	93 95       	inc	r25
 642:	f6 95       	lsr	r31
 644:	87 95       	ror	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b7 95       	ror	r27
 64c:	f1 11       	cpse	r31, r1
 64e:	f8 cf       	rjmp	.-16     	; 0x640 <__floatsisf+0x1c>
 650:	fa f4       	brpl	.+62     	; 0x690 <__floatsisf+0x6c>
 652:	bb 0f       	add	r27, r27
 654:	11 f4       	brne	.+4      	; 0x65a <__floatsisf+0x36>
 656:	60 ff       	sbrs	r22, 0
 658:	1b c0       	rjmp	.+54     	; 0x690 <__floatsisf+0x6c>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	16 c0       	rjmp	.+44     	; 0x690 <__floatsisf+0x6c>
 664:	88 23       	and	r24, r24
 666:	11 f0       	breq	.+4      	; 0x66c <__floatsisf+0x48>
 668:	96 e9       	ldi	r25, 0x96	; 150
 66a:	11 c0       	rjmp	.+34     	; 0x68e <__floatsisf+0x6a>
 66c:	77 23       	and	r23, r23
 66e:	21 f0       	breq	.+8      	; 0x678 <__floatsisf+0x54>
 670:	9e e8       	ldi	r25, 0x8E	; 142
 672:	87 2f       	mov	r24, r23
 674:	76 2f       	mov	r23, r22
 676:	05 c0       	rjmp	.+10     	; 0x682 <__floatsisf+0x5e>
 678:	66 23       	and	r22, r22
 67a:	71 f0       	breq	.+28     	; 0x698 <__floatsisf+0x74>
 67c:	96 e8       	ldi	r25, 0x86	; 134
 67e:	86 2f       	mov	r24, r22
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	2a f0       	brmi	.+10     	; 0x690 <__floatsisf+0x6c>
 686:	9a 95       	dec	r25
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	da f7       	brpl	.-10     	; 0x686 <__floatsisf+0x62>
 690:	88 0f       	add	r24, r24
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret

0000069a <__udivmodhi4>:
 69a:	aa 1b       	sub	r26, r26
 69c:	bb 1b       	sub	r27, r27
 69e:	51 e1       	ldi	r21, 0x11	; 17
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <__udivmodhi4_ep>

000006a2 <__udivmodhi4_loop>:
 6a2:	aa 1f       	adc	r26, r26
 6a4:	bb 1f       	adc	r27, r27
 6a6:	a6 17       	cp	r26, r22
 6a8:	b7 07       	cpc	r27, r23
 6aa:	10 f0       	brcs	.+4      	; 0x6b0 <__udivmodhi4_ep>
 6ac:	a6 1b       	sub	r26, r22
 6ae:	b7 0b       	sbc	r27, r23

000006b0 <__udivmodhi4_ep>:
 6b0:	88 1f       	adc	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	5a 95       	dec	r21
 6b6:	a9 f7       	brne	.-22     	; 0x6a2 <__udivmodhi4_loop>
 6b8:	80 95       	com	r24
 6ba:	90 95       	com	r25
 6bc:	bc 01       	movw	r22, r24
 6be:	cd 01       	movw	r24, r26
 6c0:	08 95       	ret

000006c2 <dtostrf>:
 6c2:	ef 92       	push	r14
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	e8 01       	movw	r28, r16
 6ce:	47 fd       	sbrc	r20, 7
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <dtostrf+0x14>
 6d2:	34 e0       	ldi	r19, 0x04	; 4
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <dtostrf+0x16>
 6d6:	34 e1       	ldi	r19, 0x14	; 20
 6d8:	04 2e       	mov	r0, r20
 6da:	00 0c       	add	r0, r0
 6dc:	55 0b       	sbc	r21, r21
 6de:	57 ff       	sbrs	r21, 7
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <dtostrf+0x26>
 6e2:	51 95       	neg	r21
 6e4:	41 95       	neg	r20
 6e6:	51 09       	sbc	r21, r1
 6e8:	e3 2e       	mov	r14, r19
 6ea:	02 2f       	mov	r16, r18
 6ec:	24 2f       	mov	r18, r20
 6ee:	ae 01       	movw	r20, r28
 6f0:	0e 94 81 03 	call	0x702	; 0x702 <dtoa_prf>
 6f4:	ce 01       	movw	r24, r28
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ef 90       	pop	r14
 700:	08 95       	ret

00000702 <dtoa_prf>:
 702:	a9 e0       	ldi	r26, 0x09	; 9
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e7 e8       	ldi	r30, 0x87	; 135
 708:	f3 e0       	ldi	r31, 0x03	; 3
 70a:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__prologue_saves__+0xc>
 70e:	6a 01       	movw	r12, r20
 710:	12 2f       	mov	r17, r18
 712:	b0 2e       	mov	r11, r16
 714:	2b e3       	ldi	r18, 0x3B	; 59
 716:	20 17       	cp	r18, r16
 718:	20 f0       	brcs	.+8      	; 0x722 <dtoa_prf+0x20>
 71a:	ff 24       	eor	r15, r15
 71c:	f3 94       	inc	r15
 71e:	f0 0e       	add	r15, r16
 720:	02 c0       	rjmp	.+4      	; 0x726 <dtoa_prf+0x24>
 722:	2c e3       	ldi	r18, 0x3C	; 60
 724:	f2 2e       	mov	r15, r18
 726:	0f 2d       	mov	r16, r15
 728:	27 e0       	ldi	r18, 0x07	; 7
 72a:	ae 01       	movw	r20, r28
 72c:	4f 5f       	subi	r20, 0xFF	; 255
 72e:	5f 4f       	sbci	r21, 0xFF	; 255
 730:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__ftoa_engine>
 734:	bc 01       	movw	r22, r24
 736:	49 81       	ldd	r20, Y+1	; 0x01
 738:	84 2f       	mov	r24, r20
 73a:	89 70       	andi	r24, 0x09	; 9
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	31 f0       	breq	.+12     	; 0x74c <dtoa_prf+0x4a>
 740:	e1 fc       	sbrc	r14, 1
 742:	06 c0       	rjmp	.+12     	; 0x750 <dtoa_prf+0x4e>
 744:	e0 fe       	sbrs	r14, 0
 746:	06 c0       	rjmp	.+12     	; 0x754 <dtoa_prf+0x52>
 748:	90 e2       	ldi	r25, 0x20	; 32
 74a:	05 c0       	rjmp	.+10     	; 0x756 <dtoa_prf+0x54>
 74c:	9d e2       	ldi	r25, 0x2D	; 45
 74e:	03 c0       	rjmp	.+6      	; 0x756 <dtoa_prf+0x54>
 750:	9b e2       	ldi	r25, 0x2B	; 43
 752:	01 c0       	rjmp	.+2      	; 0x756 <dtoa_prf+0x54>
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	5e 2d       	mov	r21, r14
 758:	50 71       	andi	r21, 0x10	; 16
 75a:	43 ff       	sbrs	r20, 3
 75c:	3c c0       	rjmp	.+120    	; 0x7d6 <dtoa_prf+0xd4>
 75e:	91 11       	cpse	r25, r1
 760:	02 c0       	rjmp	.+4      	; 0x766 <dtoa_prf+0x64>
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	01 c0       	rjmp	.+2      	; 0x768 <dtoa_prf+0x66>
 766:	84 e0       	ldi	r24, 0x04	; 4
 768:	81 17       	cp	r24, r17
 76a:	18 f4       	brcc	.+6      	; 0x772 <dtoa_prf+0x70>
 76c:	21 2f       	mov	r18, r17
 76e:	28 1b       	sub	r18, r24
 770:	01 c0       	rjmp	.+2      	; 0x774 <dtoa_prf+0x72>
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	51 11       	cpse	r21, r1
 776:	0b c0       	rjmp	.+22     	; 0x78e <dtoa_prf+0x8c>
 778:	f6 01       	movw	r30, r12
 77a:	82 2f       	mov	r24, r18
 77c:	30 e2       	ldi	r19, 0x20	; 32
 77e:	88 23       	and	r24, r24
 780:	19 f0       	breq	.+6      	; 0x788 <dtoa_prf+0x86>
 782:	31 93       	st	Z+, r19
 784:	81 50       	subi	r24, 0x01	; 1
 786:	fb cf       	rjmp	.-10     	; 0x77e <dtoa_prf+0x7c>
 788:	c2 0e       	add	r12, r18
 78a:	d1 1c       	adc	r13, r1
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	99 23       	and	r25, r25
 790:	29 f0       	breq	.+10     	; 0x79c <dtoa_prf+0x9a>
 792:	d6 01       	movw	r26, r12
 794:	9c 93       	st	X, r25
 796:	f6 01       	movw	r30, r12
 798:	31 96       	adiw	r30, 0x01	; 1
 79a:	6f 01       	movw	r12, r30
 79c:	c6 01       	movw	r24, r12
 79e:	03 96       	adiw	r24, 0x03	; 3
 7a0:	e2 fe       	sbrs	r14, 2
 7a2:	0a c0       	rjmp	.+20     	; 0x7b8 <dtoa_prf+0xb6>
 7a4:	3e e4       	ldi	r19, 0x4E	; 78
 7a6:	d6 01       	movw	r26, r12
 7a8:	3c 93       	st	X, r19
 7aa:	41 e4       	ldi	r20, 0x41	; 65
 7ac:	11 96       	adiw	r26, 0x01	; 1
 7ae:	4c 93       	st	X, r20
 7b0:	11 97       	sbiw	r26, 0x01	; 1
 7b2:	12 96       	adiw	r26, 0x02	; 2
 7b4:	3c 93       	st	X, r19
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <dtoa_prf+0xc2>
 7b8:	3e e6       	ldi	r19, 0x6E	; 110
 7ba:	f6 01       	movw	r30, r12
 7bc:	30 83       	st	Z, r19
 7be:	41 e6       	ldi	r20, 0x61	; 97
 7c0:	41 83       	std	Z+1, r20	; 0x01
 7c2:	32 83       	std	Z+2, r19	; 0x02
 7c4:	fc 01       	movw	r30, r24
 7c6:	32 2f       	mov	r19, r18
 7c8:	40 e2       	ldi	r20, 0x20	; 32
 7ca:	33 23       	and	r19, r19
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <dtoa_prf+0xce>
 7ce:	42 c0       	rjmp	.+132    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 7d0:	41 93       	st	Z+, r20
 7d2:	31 50       	subi	r19, 0x01	; 1
 7d4:	fa cf       	rjmp	.-12     	; 0x7ca <dtoa_prf+0xc8>
 7d6:	42 ff       	sbrs	r20, 2
 7d8:	44 c0       	rjmp	.+136    	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 7da:	91 11       	cpse	r25, r1
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <dtoa_prf+0xe0>
 7de:	83 e0       	ldi	r24, 0x03	; 3
 7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <dtoa_prf+0xe2>
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	81 17       	cp	r24, r17
 7e6:	18 f4       	brcc	.+6      	; 0x7ee <dtoa_prf+0xec>
 7e8:	21 2f       	mov	r18, r17
 7ea:	28 1b       	sub	r18, r24
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <dtoa_prf+0xee>
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	51 11       	cpse	r21, r1
 7f2:	0b c0       	rjmp	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f4:	f6 01       	movw	r30, r12
 7f6:	82 2f       	mov	r24, r18
 7f8:	30 e2       	ldi	r19, 0x20	; 32
 7fa:	88 23       	and	r24, r24
 7fc:	19 f0       	breq	.+6      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7fe:	31 93       	st	Z+, r19
 800:	81 50       	subi	r24, 0x01	; 1
 802:	fb cf       	rjmp	.-10     	; 0x7fa <dtoa_prf+0xf8>
 804:	c2 0e       	add	r12, r18
 806:	d1 1c       	adc	r13, r1
 808:	20 e0       	ldi	r18, 0x00	; 0
 80a:	99 23       	and	r25, r25
 80c:	29 f0       	breq	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80e:	d6 01       	movw	r26, r12
 810:	9c 93       	st	X, r25
 812:	f6 01       	movw	r30, r12
 814:	31 96       	adiw	r30, 0x01	; 1
 816:	6f 01       	movw	r12, r30
 818:	c6 01       	movw	r24, r12
 81a:	03 96       	adiw	r24, 0x03	; 3
 81c:	e2 fe       	sbrs	r14, 2
 81e:	0b c0       	rjmp	.+22     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 820:	39 e4       	ldi	r19, 0x49	; 73
 822:	d6 01       	movw	r26, r12
 824:	3c 93       	st	X, r19
 826:	3e e4       	ldi	r19, 0x4E	; 78
 828:	11 96       	adiw	r26, 0x01	; 1
 82a:	3c 93       	st	X, r19
 82c:	11 97       	sbiw	r26, 0x01	; 1
 82e:	36 e4       	ldi	r19, 0x46	; 70
 830:	12 96       	adiw	r26, 0x02	; 2
 832:	3c 93       	st	X, r19
 834:	07 c0       	rjmp	.+14     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 836:	39 e6       	ldi	r19, 0x69	; 105
 838:	f6 01       	movw	r30, r12
 83a:	30 83       	st	Z, r19
 83c:	3e e6       	ldi	r19, 0x6E	; 110
 83e:	31 83       	std	Z+1, r19	; 0x01
 840:	36 e6       	ldi	r19, 0x66	; 102
 842:	32 83       	std	Z+2, r19	; 0x02
 844:	fc 01       	movw	r30, r24
 846:	32 2f       	mov	r19, r18
 848:	40 e2       	ldi	r20, 0x20	; 32
 84a:	33 23       	and	r19, r19
 84c:	19 f0       	breq	.+6      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 84e:	41 93       	st	Z+, r20
 850:	31 50       	subi	r19, 0x01	; 1
 852:	fb cf       	rjmp	.-10     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 854:	fc 01       	movw	r30, r24
 856:	e2 0f       	add	r30, r18
 858:	f1 1d       	adc	r31, r1
 85a:	10 82       	st	Z, r1
 85c:	8e ef       	ldi	r24, 0xFE	; 254
 85e:	9f ef       	ldi	r25, 0xFF	; 255
 860:	a6 c0       	rjmp	.+332    	; 0x9ae <__stack+0xaf>
 862:	21 e0       	ldi	r18, 0x01	; 1
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	91 11       	cpse	r25, r1
 868:	02 c0       	rjmp	.+4      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86a:	20 e0       	ldi	r18, 0x00	; 0
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	1c f4       	brge	.+6      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 874:	fb 01       	movw	r30, r22
 876:	31 96       	adiw	r30, 0x01	; 1
 878:	02 c0       	rjmp	.+4      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 87a:	e1 e0       	ldi	r30, 0x01	; 1
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	2e 0f       	add	r18, r30
 880:	3f 1f       	adc	r19, r31
 882:	bb 20       	and	r11, r11
 884:	21 f0       	breq	.+8      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 886:	eb 2d       	mov	r30, r11
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	31 96       	adiw	r30, 0x01	; 1
 88c:	02 c0       	rjmp	.+4      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 88e:	e0 e0       	ldi	r30, 0x00	; 0
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	2e 0f       	add	r18, r30
 894:	3f 1f       	adc	r19, r31
 896:	e1 2f       	mov	r30, r17
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	2e 17       	cp	r18, r30
 89c:	3f 07       	cpc	r19, r31
 89e:	1c f4       	brge	.+6      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 8a0:	12 1b       	sub	r17, r18
 8a2:	21 2f       	mov	r18, r17
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a6:	20 e0       	ldi	r18, 0x00	; 0
 8a8:	8e 2d       	mov	r24, r14
 8aa:	88 71       	andi	r24, 0x18	; 24
 8ac:	59 f4       	brne	.+22     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8ae:	f6 01       	movw	r30, r12
 8b0:	82 2f       	mov	r24, r18
 8b2:	30 e2       	ldi	r19, 0x20	; 32
 8b4:	88 23       	and	r24, r24
 8b6:	19 f0       	breq	.+6      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8b8:	31 93       	st	Z+, r19
 8ba:	81 50       	subi	r24, 0x01	; 1
 8bc:	fb cf       	rjmp	.-10     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8be:	c2 0e       	add	r12, r18
 8c0:	d1 1c       	adc	r13, r1
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	99 23       	and	r25, r25
 8c6:	29 f0       	breq	.+10     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c8:	d6 01       	movw	r26, r12
 8ca:	9c 93       	st	X, r25
 8cc:	f6 01       	movw	r30, r12
 8ce:	31 96       	adiw	r30, 0x01	; 1
 8d0:	6f 01       	movw	r12, r30
 8d2:	51 11       	cpse	r21, r1
 8d4:	0b c0       	rjmp	.+22     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8d6:	f6 01       	movw	r30, r12
 8d8:	82 2f       	mov	r24, r18
 8da:	90 e3       	ldi	r25, 0x30	; 48
 8dc:	88 23       	and	r24, r24
 8de:	19 f0       	breq	.+6      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8e0:	91 93       	st	Z+, r25
 8e2:	81 50       	subi	r24, 0x01	; 1
 8e4:	fb cf       	rjmp	.-10     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8e6:	c2 0e       	add	r12, r18
 8e8:	d1 1c       	adc	r13, r1
 8ea:	20 e0       	ldi	r18, 0x00	; 0
 8ec:	0f 2d       	mov	r16, r15
 8ee:	06 0f       	add	r16, r22
 8f0:	9a 81       	ldd	r25, Y+2	; 0x02
 8f2:	34 2f       	mov	r19, r20
 8f4:	30 71       	andi	r19, 0x10	; 16
 8f6:	44 ff       	sbrs	r20, 4
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <__stack+0x1>
 8fa:	91 33       	cpi	r25, 0x31	; 49
 8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0x1>
 8fe:	01 50       	subi	r16, 0x01	; 1
 900:	10 16       	cp	r1, r16
 902:	24 f4       	brge	.+8      	; 0x90c <__stack+0xd>
 904:	09 30       	cpi	r16, 0x09	; 9
 906:	18 f0       	brcs	.+6      	; 0x90e <__stack+0xf>
 908:	08 e0       	ldi	r16, 0x08	; 8
 90a:	01 c0       	rjmp	.+2      	; 0x90e <__stack+0xf>
 90c:	01 e0       	ldi	r16, 0x01	; 1
 90e:	ab 01       	movw	r20, r22
 910:	77 ff       	sbrs	r23, 7
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
 914:	40 e0       	ldi	r20, 0x00	; 0
 916:	50 e0       	ldi	r21, 0x00	; 0
 918:	fb 01       	movw	r30, r22
 91a:	e4 1b       	sub	r30, r20
 91c:	f5 0b       	sbc	r31, r21
 91e:	a1 e0       	ldi	r26, 0x01	; 1
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	ac 0f       	add	r26, r28
 924:	bd 1f       	adc	r27, r29
 926:	ea 0f       	add	r30, r26
 928:	fb 1f       	adc	r31, r27
 92a:	8e e2       	ldi	r24, 0x2E	; 46
 92c:	a8 2e       	mov	r10, r24
 92e:	4b 01       	movw	r8, r22
 930:	80 1a       	sub	r8, r16
 932:	91 08       	sbc	r9, r1
 934:	0b 2d       	mov	r16, r11
 936:	10 e0       	ldi	r17, 0x00	; 0
 938:	11 95       	neg	r17
 93a:	01 95       	neg	r16
 93c:	11 09       	sbc	r17, r1
 93e:	4f 3f       	cpi	r20, 0xFF	; 255
 940:	bf ef       	ldi	r27, 0xFF	; 255
 942:	5b 07       	cpc	r21, r27
 944:	21 f4       	brne	.+8      	; 0x94e <__stack+0x4f>
 946:	d6 01       	movw	r26, r12
 948:	ac 92       	st	X, r10
 94a:	11 96       	adiw	r26, 0x01	; 1
 94c:	6d 01       	movw	r12, r26
 94e:	64 17       	cp	r22, r20
 950:	75 07       	cpc	r23, r21
 952:	2c f0       	brlt	.+10     	; 0x95e <__stack+0x5f>
 954:	84 16       	cp	r8, r20
 956:	95 06       	cpc	r9, r21
 958:	14 f4       	brge	.+4      	; 0x95e <__stack+0x5f>
 95a:	81 81       	ldd	r24, Z+1	; 0x01
 95c:	01 c0       	rjmp	.+2      	; 0x960 <__stack+0x61>
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	41 50       	subi	r20, 0x01	; 1
 962:	51 09       	sbc	r21, r1
 964:	31 96       	adiw	r30, 0x01	; 1
 966:	d6 01       	movw	r26, r12
 968:	11 96       	adiw	r26, 0x01	; 1
 96a:	7d 01       	movw	r14, r26
 96c:	40 17       	cp	r20, r16
 96e:	51 07       	cpc	r21, r17
 970:	24 f0       	brlt	.+8      	; 0x97a <__stack+0x7b>
 972:	d6 01       	movw	r26, r12
 974:	8c 93       	st	X, r24
 976:	67 01       	movw	r12, r14
 978:	e2 cf       	rjmp	.-60     	; 0x93e <__stack+0x3f>
 97a:	64 17       	cp	r22, r20
 97c:	75 07       	cpc	r23, r21
 97e:	39 f4       	brne	.+14     	; 0x98e <__stack+0x8f>
 980:	96 33       	cpi	r25, 0x36	; 54
 982:	20 f4       	brcc	.+8      	; 0x98c <__stack+0x8d>
 984:	95 33       	cpi	r25, 0x35	; 53
 986:	19 f4       	brne	.+6      	; 0x98e <__stack+0x8f>
 988:	31 11       	cpse	r19, r1
 98a:	01 c0       	rjmp	.+2      	; 0x98e <__stack+0x8f>
 98c:	81 e3       	ldi	r24, 0x31	; 49
 98e:	f6 01       	movw	r30, r12
 990:	80 83       	st	Z, r24
 992:	f7 01       	movw	r30, r14
 994:	82 2f       	mov	r24, r18
 996:	90 e2       	ldi	r25, 0x20	; 32
 998:	88 23       	and	r24, r24
 99a:	19 f0       	breq	.+6      	; 0x9a2 <__stack+0xa3>
 99c:	91 93       	st	Z+, r25
 99e:	81 50       	subi	r24, 0x01	; 1
 9a0:	fb cf       	rjmp	.-10     	; 0x998 <__stack+0x99>
 9a2:	f7 01       	movw	r30, r14
 9a4:	e2 0f       	add	r30, r18
 9a6:	f1 1d       	adc	r31, r1
 9a8:	10 82       	st	Z, r1
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	29 96       	adiw	r28, 0x09	; 9
 9b0:	ec e0       	ldi	r30, 0x0C	; 12
 9b2:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__epilogue_restores__+0xc>

000009b6 <__ftoa_engine>:
 9b6:	28 30       	cpi	r18, 0x08	; 8
 9b8:	08 f0       	brcs	.+2      	; 0x9bc <__ftoa_engine+0x6>
 9ba:	27 e0       	ldi	r18, 0x07	; 7
 9bc:	33 27       	eor	r19, r19
 9be:	da 01       	movw	r26, r20
 9c0:	99 0f       	add	r25, r25
 9c2:	31 1d       	adc	r19, r1
 9c4:	87 fd       	sbrc	r24, 7
 9c6:	91 60       	ori	r25, 0x01	; 1
 9c8:	00 96       	adiw	r24, 0x00	; 0
 9ca:	61 05       	cpc	r22, r1
 9cc:	71 05       	cpc	r23, r1
 9ce:	39 f4       	brne	.+14     	; 0x9de <__ftoa_engine+0x28>
 9d0:	32 60       	ori	r19, 0x02	; 2
 9d2:	2e 5f       	subi	r18, 0xFE	; 254
 9d4:	3d 93       	st	X+, r19
 9d6:	30 e3       	ldi	r19, 0x30	; 48
 9d8:	2a 95       	dec	r18
 9da:	e1 f7       	brne	.-8      	; 0x9d4 <__ftoa_engine+0x1e>
 9dc:	08 95       	ret
 9de:	9f 3f       	cpi	r25, 0xFF	; 255
 9e0:	30 f0       	brcs	.+12     	; 0x9ee <__ftoa_engine+0x38>
 9e2:	80 38       	cpi	r24, 0x80	; 128
 9e4:	71 05       	cpc	r23, r1
 9e6:	61 05       	cpc	r22, r1
 9e8:	09 f0       	breq	.+2      	; 0x9ec <__ftoa_engine+0x36>
 9ea:	3c 5f       	subi	r19, 0xFC	; 252
 9ec:	3c 5f       	subi	r19, 0xFC	; 252
 9ee:	3d 93       	st	X+, r19
 9f0:	91 30       	cpi	r25, 0x01	; 1
 9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__ftoa_engine+0x40>
 9f4:	80 68       	ori	r24, 0x80	; 128
 9f6:	91 1d       	adc	r25, r1
 9f8:	df 93       	push	r29
 9fa:	cf 93       	push	r28
 9fc:	1f 93       	push	r17
 9fe:	0f 93       	push	r16
 a00:	ff 92       	push	r15
 a02:	ef 92       	push	r14
 a04:	19 2f       	mov	r17, r25
 a06:	98 7f       	andi	r25, 0xF8	; 248
 a08:	96 95       	lsr	r25
 a0a:	e9 2f       	mov	r30, r25
 a0c:	96 95       	lsr	r25
 a0e:	96 95       	lsr	r25
 a10:	e9 0f       	add	r30, r25
 a12:	ff 27       	eor	r31, r31
 a14:	ee 53       	subi	r30, 0x3E	; 62
 a16:	ff 4f       	sbci	r31, 0xFF	; 255
 a18:	99 27       	eor	r25, r25
 a1a:	33 27       	eor	r19, r19
 a1c:	ee 24       	eor	r14, r14
 a1e:	ff 24       	eor	r15, r15
 a20:	a7 01       	movw	r20, r14
 a22:	e7 01       	movw	r28, r14
 a24:	05 90       	lpm	r0, Z+
 a26:	08 94       	sec
 a28:	07 94       	ror	r0
 a2a:	28 f4       	brcc	.+10     	; 0xa36 <__ftoa_engine+0x80>
 a2c:	36 0f       	add	r19, r22
 a2e:	e7 1e       	adc	r14, r23
 a30:	f8 1e       	adc	r15, r24
 a32:	49 1f       	adc	r20, r25
 a34:	51 1d       	adc	r21, r1
 a36:	66 0f       	add	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	06 94       	lsr	r0
 a40:	a1 f7       	brne	.-24     	; 0xa2a <__ftoa_engine+0x74>
 a42:	05 90       	lpm	r0, Z+
 a44:	07 94       	ror	r0
 a46:	28 f4       	brcc	.+10     	; 0xa52 <__ftoa_engine+0x9c>
 a48:	e7 0e       	add	r14, r23
 a4a:	f8 1e       	adc	r15, r24
 a4c:	49 1f       	adc	r20, r25
 a4e:	56 1f       	adc	r21, r22
 a50:	c1 1d       	adc	r28, r1
 a52:	77 0f       	add	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	66 1f       	adc	r22, r22
 a5a:	06 94       	lsr	r0
 a5c:	a1 f7       	brne	.-24     	; 0xa46 <__ftoa_engine+0x90>
 a5e:	05 90       	lpm	r0, Z+
 a60:	07 94       	ror	r0
 a62:	28 f4       	brcc	.+10     	; 0xa6e <__ftoa_engine+0xb8>
 a64:	f8 0e       	add	r15, r24
 a66:	49 1f       	adc	r20, r25
 a68:	56 1f       	adc	r21, r22
 a6a:	c7 1f       	adc	r28, r23
 a6c:	d1 1d       	adc	r29, r1
 a6e:	88 0f       	add	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	66 1f       	adc	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	06 94       	lsr	r0
 a78:	a1 f7       	brne	.-24     	; 0xa62 <__ftoa_engine+0xac>
 a7a:	05 90       	lpm	r0, Z+
 a7c:	07 94       	ror	r0
 a7e:	20 f4       	brcc	.+8      	; 0xa88 <__ftoa_engine+0xd2>
 a80:	49 0f       	add	r20, r25
 a82:	56 1f       	adc	r21, r22
 a84:	c7 1f       	adc	r28, r23
 a86:	d8 1f       	adc	r29, r24
 a88:	99 0f       	add	r25, r25
 a8a:	66 1f       	adc	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	06 94       	lsr	r0
 a92:	a9 f7       	brne	.-22     	; 0xa7e <__ftoa_engine+0xc8>
 a94:	84 91       	lpm	r24, Z
 a96:	10 95       	com	r17
 a98:	17 70       	andi	r17, 0x07	; 7
 a9a:	41 f0       	breq	.+16     	; 0xaac <__ftoa_engine+0xf6>
 a9c:	d6 95       	lsr	r29
 a9e:	c7 95       	ror	r28
 aa0:	57 95       	ror	r21
 aa2:	47 95       	ror	r20
 aa4:	f7 94       	ror	r15
 aa6:	e7 94       	ror	r14
 aa8:	1a 95       	dec	r17
 aaa:	c1 f7       	brne	.-16     	; 0xa9c <__ftoa_engine+0xe6>
 aac:	e8 e6       	ldi	r30, 0x68	; 104
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	68 94       	set
 ab2:	15 90       	lpm	r1, Z+
 ab4:	15 91       	lpm	r17, Z+
 ab6:	35 91       	lpm	r19, Z+
 ab8:	65 91       	lpm	r22, Z+
 aba:	95 91       	lpm	r25, Z+
 abc:	05 90       	lpm	r0, Z+
 abe:	7f e2       	ldi	r23, 0x2F	; 47
 ac0:	73 95       	inc	r23
 ac2:	e1 18       	sub	r14, r1
 ac4:	f1 0a       	sbc	r15, r17
 ac6:	43 0b       	sbc	r20, r19
 ac8:	56 0b       	sbc	r21, r22
 aca:	c9 0b       	sbc	r28, r25
 acc:	d0 09       	sbc	r29, r0
 ace:	c0 f7       	brcc	.-16     	; 0xac0 <__ftoa_engine+0x10a>
 ad0:	e1 0c       	add	r14, r1
 ad2:	f1 1e       	adc	r15, r17
 ad4:	43 1f       	adc	r20, r19
 ad6:	56 1f       	adc	r21, r22
 ad8:	c9 1f       	adc	r28, r25
 ada:	d0 1d       	adc	r29, r0
 adc:	7e f4       	brtc	.+30     	; 0xafc <__ftoa_engine+0x146>
 ade:	70 33       	cpi	r23, 0x30	; 48
 ae0:	11 f4       	brne	.+4      	; 0xae6 <__ftoa_engine+0x130>
 ae2:	8a 95       	dec	r24
 ae4:	e6 cf       	rjmp	.-52     	; 0xab2 <__ftoa_engine+0xfc>
 ae6:	e8 94       	clt
 ae8:	01 50       	subi	r16, 0x01	; 1
 aea:	30 f0       	brcs	.+12     	; 0xaf8 <__ftoa_engine+0x142>
 aec:	08 0f       	add	r16, r24
 aee:	0a f4       	brpl	.+2      	; 0xaf2 <__ftoa_engine+0x13c>
 af0:	00 27       	eor	r16, r16
 af2:	02 17       	cp	r16, r18
 af4:	08 f4       	brcc	.+2      	; 0xaf8 <__ftoa_engine+0x142>
 af6:	20 2f       	mov	r18, r16
 af8:	23 95       	inc	r18
 afa:	02 2f       	mov	r16, r18
 afc:	7a 33       	cpi	r23, 0x3A	; 58
 afe:	28 f0       	brcs	.+10     	; 0xb0a <__ftoa_engine+0x154>
 b00:	79 e3       	ldi	r23, 0x39	; 57
 b02:	7d 93       	st	X+, r23
 b04:	2a 95       	dec	r18
 b06:	e9 f7       	brne	.-6      	; 0xb02 <__ftoa_engine+0x14c>
 b08:	10 c0       	rjmp	.+32     	; 0xb2a <__ftoa_engine+0x174>
 b0a:	7d 93       	st	X+, r23
 b0c:	2a 95       	dec	r18
 b0e:	89 f6       	brne	.-94     	; 0xab2 <__ftoa_engine+0xfc>
 b10:	06 94       	lsr	r0
 b12:	97 95       	ror	r25
 b14:	67 95       	ror	r22
 b16:	37 95       	ror	r19
 b18:	17 95       	ror	r17
 b1a:	17 94       	ror	r1
 b1c:	e1 18       	sub	r14, r1
 b1e:	f1 0a       	sbc	r15, r17
 b20:	43 0b       	sbc	r20, r19
 b22:	56 0b       	sbc	r21, r22
 b24:	c9 0b       	sbc	r28, r25
 b26:	d0 09       	sbc	r29, r0
 b28:	98 f0       	brcs	.+38     	; 0xb50 <__ftoa_engine+0x19a>
 b2a:	23 95       	inc	r18
 b2c:	7e 91       	ld	r23, -X
 b2e:	73 95       	inc	r23
 b30:	7a 33       	cpi	r23, 0x3A	; 58
 b32:	08 f0       	brcs	.+2      	; 0xb36 <__ftoa_engine+0x180>
 b34:	70 e3       	ldi	r23, 0x30	; 48
 b36:	7c 93       	st	X, r23
 b38:	20 13       	cpse	r18, r16
 b3a:	b8 f7       	brcc	.-18     	; 0xb2a <__ftoa_engine+0x174>
 b3c:	7e 91       	ld	r23, -X
 b3e:	70 61       	ori	r23, 0x10	; 16
 b40:	7d 93       	st	X+, r23
 b42:	30 f0       	brcs	.+12     	; 0xb50 <__ftoa_engine+0x19a>
 b44:	83 95       	inc	r24
 b46:	71 e3       	ldi	r23, 0x31	; 49
 b48:	7d 93       	st	X+, r23
 b4a:	70 e3       	ldi	r23, 0x30	; 48
 b4c:	2a 95       	dec	r18
 b4e:	e1 f7       	brne	.-8      	; 0xb48 <__ftoa_engine+0x192>
 b50:	11 24       	eor	r1, r1
 b52:	ef 90       	pop	r14
 b54:	ff 90       	pop	r15
 b56:	0f 91       	pop	r16
 b58:	1f 91       	pop	r17
 b5a:	cf 91       	pop	r28
 b5c:	df 91       	pop	r29
 b5e:	99 27       	eor	r25, r25
 b60:	87 fd       	sbrc	r24, 7
 b62:	90 95       	com	r25
 b64:	08 95       	ret

00000b66 <__prologue_saves__>:
 b66:	2f 92       	push	r2
 b68:	3f 92       	push	r3
 b6a:	4f 92       	push	r4
 b6c:	5f 92       	push	r5
 b6e:	6f 92       	push	r6
 b70:	7f 92       	push	r7
 b72:	8f 92       	push	r8
 b74:	9f 92       	push	r9
 b76:	af 92       	push	r10
 b78:	bf 92       	push	r11
 b7a:	cf 92       	push	r12
 b7c:	df 92       	push	r13
 b7e:	ef 92       	push	r14
 b80:	ff 92       	push	r15
 b82:	0f 93       	push	r16
 b84:	1f 93       	push	r17
 b86:	cf 93       	push	r28
 b88:	df 93       	push	r29
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
 b8e:	ca 1b       	sub	r28, r26
 b90:	db 0b       	sbc	r29, r27
 b92:	0f b6       	in	r0, 0x3f	; 63
 b94:	f8 94       	cli
 b96:	de bf       	out	0x3e, r29	; 62
 b98:	0f be       	out	0x3f, r0	; 63
 b9a:	cd bf       	out	0x3d, r28	; 61
 b9c:	09 94       	ijmp

00000b9e <__epilogue_restores__>:
 b9e:	2a 88       	ldd	r2, Y+18	; 0x12
 ba0:	39 88       	ldd	r3, Y+17	; 0x11
 ba2:	48 88       	ldd	r4, Y+16	; 0x10
 ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
 baa:	8c 84       	ldd	r8, Y+12	; 0x0c
 bac:	9b 84       	ldd	r9, Y+11	; 0x0b
 bae:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb0:	b9 84       	ldd	r11, Y+9	; 0x09
 bb2:	c8 84       	ldd	r12, Y+8	; 0x08
 bb4:	df 80       	ldd	r13, Y+7	; 0x07
 bb6:	ee 80       	ldd	r14, Y+6	; 0x06
 bb8:	fd 80       	ldd	r15, Y+5	; 0x05
 bba:	0c 81       	ldd	r16, Y+4	; 0x04
 bbc:	1b 81       	ldd	r17, Y+3	; 0x03
 bbe:	aa 81       	ldd	r26, Y+2	; 0x02
 bc0:	b9 81       	ldd	r27, Y+1	; 0x01
 bc2:	ce 0f       	add	r28, r30
 bc4:	d1 1d       	adc	r29, r1
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
 bca:	de bf       	out	0x3e, r29	; 62
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	cd bf       	out	0x3d, r28	; 61
 bd0:	ed 01       	movw	r28, r26
 bd2:	08 95       	ret

00000bd4 <_exit>:
 bd4:	f8 94       	cli

00000bd6 <__stop_program>:
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <__stop_program>
