
SDK_Atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000003e6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000143d  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b69  00000000  00000000  00001a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b37  00000000  00000000  000025f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ac  00000000  00000000  0000312c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c1  00000000  00000000  000033d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c0  00000000  00000000  00003899  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_23>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  8e:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_23>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__vector_23+0x40>
	//Realiza esta operación mientras voltaje de entrada > voltaje de referencia
	{
		lcd_i2c_col_row(1,2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_i2c_col_row>
		lcd_i2c_write_string("Comparando...");
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_i2c_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e4       	ldi	r24, 0x4F	; 79
  cc:	93 ec       	ldi	r25, 0xC3	; 195
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <__vector_23+0x38>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <__vector_23+0x3e>
  d4:	00 00       	nop
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
  d6:	00 b6       	in	r0, 0x30	; 48
  d8:	05 fc       	sbrc	r0, 5
  da:	ef cf       	rjmp	.-34     	; 0xba <__vector_23+0x24>
	{
		lcd_i2c_col_row(1,2);
		lcd_i2c_write_string("Comparando...");
		_delay_ms(200);
	}
	lcd_i2c_col_row(1,2);
  dc:	62 e0       	ldi	r22, 0x02	; 2
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_i2c_col_row>
	lcd_i2c_write_string("             ");
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_i2c_write_string>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <init_comp>:

void init_comp(void)
{
	ACSR |= 1 << ACI | 1 << ACIS1 | 1<< ACIS0;	//Bandera de interrupciones (ACI=1)
 10e:	80 b7       	in	r24, 0x30	; 48
 110:	83 61       	ori	r24, 0x13	; 19
 112:	80 bf       	out	0x30, r24	; 48
												//Modo de interrupción (ACIS1=1:ACIS0=1 flanco de subida) pag.245
	ACSR |= 1 <<ACIE;	//Limpiar bandera de interrupciones (ACSR-->ACI)
 114:	80 b7       	in	r24, 0x30	; 48
 116:	88 60       	ori	r24, 0x08	; 8
 118:	80 bf       	out	0x30, r24	; 48
	sei();//Habilitar interrupciones generales
 11a:	78 94       	sei
 11c:	08 95       	ret

0000011e <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
 11e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
 122:	84 e1       	ldi	r24, 0x14	; 20
 124:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12e:	08 95       	ret

00000130 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
 130:	84 ea       	ldi	r24, 0xA4	; 164
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 136:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13a:	88 23       	and	r24, r24
 13c:	e4 f7       	brge	.-8      	; 0x136 <start+0x6>
}
 13e:	08 95       	ret

00000140 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
 140:	84 e9       	ldi	r24, 0x94	; 148
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <stop+0xa>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <stop+0x10>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte a escribir
 154:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
 158:	84 ec       	ldi	r24, 0xC4	; 196
 15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 15e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 162:	88 23       	and	r24, r24
 164:	e4 f7       	brge	.-8      	; 0x15e <write_i2c+0xa>
}
 166:	08 95       	ret

00000168 <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(INT0_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	lcd_i2c_col_row(3,2);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_i2c_col_row>
	lcd_i2c_write_string("recibe INT0 ");
 192:	8e e1       	ldi	r24, 0x1E	; 30
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_i2c_write_string>
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <init_INT0>:
void init_INT0(void)
{
	EICRA |= 1 << ISC01; //Define sensado de interrupcion en el flanco de bajada (ver tabla 13-2 pag.)
 1bc:	e9 e6       	ldi	r30, 0x69	; 105
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	80 83       	st	Z, r24
	EIMSK |= 1 << INT0; //Activa interrupción 0
 1c6:	8d b3       	in	r24, 0x1d	; 29
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	8d bb       	out	0x1d, r24	; 29
	sei(); //Habilita interrupciones generales (sei())
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <init_ports>:
 */ 
#include <avr/io.h>
void init_ports (void)
{
	// Define puerto B-->salida
	DDRB = 0xff;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	84 b9       	out	0x04, r24	; 4
		PB4			
		PB5			Power on LED
		PB6			
		PB7			
	*/
	DDRD &= 0 << PD2; //entrada de interrupci[on externa
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	1a b8       	out	0x0a, r1	; 10
	PORTD |= 1 << PD2; //activa resistencia de PullUp.
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	8b b9       	out	0x0b, r24	; 11
	
	// Salidas para interfaz a 2 hilos TWI
	DDRC|=(1<<PC4)|(1<<PC5);	// Como salida SDA y SCL
 1de:	87 b1       	in	r24, 0x07	; 7
 1e0:	80 63       	ori	r24, 0x30	; 48
 1e2:	87 b9       	out	0x07, r24	; 7
	PORTC|=(1<<PC4)|(1<<PC5);	// SDA y SCL con pull up.
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	80 63       	ori	r24, 0x30	; 48
 1e8:	88 b9       	out	0x08, r24	; 8
 1ea:	08 95       	ret

000001ec <lcd_i2c_reset>:
 1ec:	0e 94 98 00 	call	0x130	; 0x130 <start>
 1f0:	80 e7       	ldi	r24, 0x70	; 112
 1f2:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	89 ef       	ldi	r24, 0xF9	; 249
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <lcd_i2c_reset+0x16>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_i2c_reset+0x20>
 20c:	00 00       	nop
 20e:	84 e3       	ldi	r24, 0x34	; 52
 210:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9c e9       	ldi	r25, 0x9C	; 156
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_i2c_reset+0x32>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_i2c_reset+0x38>
 224:	00 00       	nop
 226:	84 e3       	ldi	r24, 0x34	; 52
 228:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_i2c_reset+0x4a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_i2c_reset+0x50>
 23c:	00 00       	nop
 23e:	84 e3       	ldi	r24, 0x34	; 52
 240:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 24a:	8f e9       	ldi	r24, 0x9F	; 159
 24c:	9f e0       	ldi	r25, 0x0F	; 15
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_i2c_reset+0x62>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_i2c_reset+0x68>
 254:	00 00       	nop
 256:	84 e2       	ldi	r24, 0x24	; 36
 258:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 262:	8f e9       	ldi	r24, 0x9F	; 159
 264:	9f e0       	ldi	r25, 0x0F	; 15
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_i2c_reset+0x7a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_i2c_reset+0x80>
 26c:	00 00       	nop
 26e:	0e 94 a0 00 	call	0x140	; 0x140 <stop>
 272:	08 95       	ret

00000274 <lcd_i2c_cmd>:
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	c8 2f       	mov	r28, r24
 27a:	0e 94 98 00 	call	0x130	; 0x130 <start>
 27e:	80 e7       	ldi	r24, 0x70	; 112
 280:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 284:	dc 2f       	mov	r29, r28
 286:	d0 7f       	andi	r29, 0xF0	; 240
 288:	8d 2f       	mov	r24, r29
 28a:	8c 60       	ori	r24, 0x0C	; 12
 28c:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 290:	8d 2f       	mov	r24, r29
 292:	88 60       	ori	r24, 0x08	; 8
 294:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 298:	80 e1       	ldi	r24, 0x10	; 16
 29a:	c8 9f       	mul	r28, r24
 29c:	e0 01       	movw	r28, r0
 29e:	11 24       	eor	r1, r1
 2a0:	8c 2f       	mov	r24, r28
 2a2:	8c 60       	ori	r24, 0x0C	; 12
 2a4:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 2a8:	8c 2f       	mov	r24, r28
 2aa:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 2ae:	0e 94 a0 00 	call	0x140	; 0x140 <stop>
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	9f e1       	ldi	r25, 0x1F	; 31
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_i2c_cmd+0x42>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_i2c_cmd+0x48>
 2bc:	00 00       	nop
 2be:	8f e3       	ldi	r24, 0x3F	; 63
 2c0:	9f e1       	ldi	r25, 0x1F	; 31
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_i2c_cmd+0x4e>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_i2c_cmd+0x54>
 2c8:	00 00       	nop
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <lcd_i2c_init>:
 2d0:	0e 94 8f 00 	call	0x11e	; 0x11e <init_i2c>
 2d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_i2c_reset>
 2d8:	8c e2       	ldi	r24, 0x2C	; 44
 2da:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_i2c_cmd>
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_i2c_cmd>
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_i2c_cmd>
 2ea:	80 e8       	ldi	r24, 0x80	; 128
 2ec:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_i2c_cmd>
 2f0:	08 95       	ret

000002f2 <lcd_i2c_data>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	c8 2f       	mov	r28, r24
 2f8:	0e 94 98 00 	call	0x130	; 0x130 <start>
 2fc:	80 e7       	ldi	r24, 0x70	; 112
 2fe:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 302:	dc 2f       	mov	r29, r28
 304:	d0 7f       	andi	r29, 0xF0	; 240
 306:	8d 2f       	mov	r24, r29
 308:	8d 60       	ori	r24, 0x0D	; 13
 30a:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 30e:	8d 2f       	mov	r24, r29
 310:	89 60       	ori	r24, 0x09	; 9
 312:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 316:	80 e1       	ldi	r24, 0x10	; 16
 318:	c8 9f       	mul	r28, r24
 31a:	e0 01       	movw	r28, r0
 31c:	11 24       	eor	r1, r1
 31e:	8c 2f       	mov	r24, r28
 320:	8d 60       	ori	r24, 0x0D	; 13
 322:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 326:	8c 2f       	mov	r24, r28
 328:	89 60       	ori	r24, 0x09	; 9
 32a:	0e 94 aa 00 	call	0x154	; 0x154 <write_i2c>
 32e:	0e 94 a0 00 	call	0x140	; 0x140 <stop>
 332:	8f e3       	ldi	r24, 0x3F	; 63
 334:	9f e1       	ldi	r25, 0x1F	; 31
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_i2c_data+0x44>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_i2c_data+0x4a>
 33c:	00 00       	nop
 33e:	8f e3       	ldi	r24, 0x3F	; 63
 340:	9f e1       	ldi	r25, 0x1F	; 31
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <lcd_i2c_data+0x50>
 346:	00 c0       	rjmp	.+0      	; 0x348 <lcd_i2c_data+0x56>
 348:	00 00       	nop
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <lcd_i2c_col_row>:
 350:	e6 2f       	mov	r30, r22
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	e1 50       	subi	r30, 0x01	; 1
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	90 81       	ld	r25, Z
 35a:	89 0f       	add	r24, r25
 35c:	81 58       	subi	r24, 0x81	; 129
 35e:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_i2c_cmd>
 362:	08 95       	ret

00000364 <lcd_i2c_write_string>:
*	Despliega una cadena de caracteres
*	Entrada: Cadena de caracteres entre comillas (p.e. "Hola LCD..")
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 36e:	c0 e0       	ldi	r28, 0x00	; 0
 370:	d0 e0       	ldi	r29, 0x00	; 0
 372:	03 c0       	rjmp	.+6      	; 0x37a <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 374:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_i2c_data>
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	f8 01       	movw	r30, r16
 37c:	ec 0f       	add	r30, r28
 37e:	fd 1f       	adc	r31, r29
 380:	80 81       	ld	r24, Z
 382:	81 11       	cpse	r24, r1
 384:	f7 cf       	rjmp	.-18     	; 0x374 <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <power_on>:

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	0f c0       	rjmp	.+30     	; 0x3b4 <power_on+0x24>
	{
		PORTB ^= 1 << PB5; //toggle led
 396:	95 b1       	in	r25, 0x05	; 5
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	89 27       	eor	r24, r25
 39c:	85 b9       	out	0x05, r24	; 5
 39e:	4f ef       	ldi	r20, 0xFF	; 255
 3a0:	81 ee       	ldi	r24, 0xE1	; 225
 3a2:	94 e0       	ldi	r25, 0x04	; 4
 3a4:	41 50       	subi	r20, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <power_on+0x14>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <power_on+0x1e>
 3ae:	00 00       	nop

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 3b0:	2f 5f       	subi	r18, 0xFF	; 255
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	25 30       	cpi	r18, 0x05	; 5
 3b6:	31 05       	cpc	r19, r1
 3b8:	74 f3       	brlt	.-36     	; 0x396 <power_on+0x6>
	{
		PORTB ^= 1 << PB5; //toggle led
		_delay_ms(100);
	}
 3ba:	08 95       	ret

000003bc <main>:

int main(void)
{
    /* Replace with your application code */

	init_ports();
 3bc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <init_ports>
	
	power_on(); //LED para indicar que el programa esta funcionando
 3c0:	0e 94 c8 01 	call	0x390	; 0x390 <power_on>
		
	/************************************************************************
	* USO DEL LCD CON I2C
	************************************************************************/
	lcd_i2c_init();
 3c4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_i2c_init>
	lcd_i2c_col_row(3,1);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_i2c_col_row>
	lcd_i2c_write_string("hola lcd i2c");
 3d0:	8b e2       	ldi	r24, 0x2B	; 43
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_i2c_write_string>
	/************************************************************************
	* USO DE INTERRUPCIONES EXTERNAS
	************************************************************************/
	init_INT0();
 3d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <init_INT0>
	/************************************************************************
	* USO DE COMPARADOR
	************************************************************************/
	init_comp();
 3dc:	0e 94 87 00 	call	0x10e	; 0x10e <init_comp>
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <main+0x24>

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
