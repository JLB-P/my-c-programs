
SDK_Atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000bca  00000c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001706  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cc5  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cf3  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00003f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000522  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bb0  00000000  00000000  00004782  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00005332  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_1>
   8:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
   c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  10:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  14:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  18:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  1c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  20:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  24:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  28:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  30:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  34:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  38:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  3c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  44:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  48:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  4c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  50:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  54:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_21>
  58:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  5c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_23>
  60:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>
  64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__ftoa_engine+0x1a>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__udivmodhi4_ep+0xc>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <init_ports+0x18>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <__bad_interrupt>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <__vector_21+0x3e>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ea ec       	ldi	r30, 0xCA	; 202
 176:	fb e0       	ldi	r31, 0x0B	; 11
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	a2 34       	cpi	r26, 0x42	; 66
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>
 184:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
 188:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_exit>

0000018c <__bad_interrupt>:
 18c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000190 <__vector_21>:
* USO DEL ADC CON INTERRUPCIONES
************************************************************************/

/***Rutina de atención a las interrupciones del convertidor***/
ISR (ADC_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2a 97       	sbiw	r28, 0x0a	; 10
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	cd bf       	out	0x3d, r28	; 61
	uint8_t LowPart = ADCL;	//10-bit resolution
 1c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH << 2 | LowPart >> 6; //10-bit resolution
 1c8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	82 95       	swap	r24
 1d8:	86 95       	lsr	r24
 1da:	86 95       	lsr	r24
 1dc:	83 70       	andi	r24, 0x03	; 3
 1de:	28 2b       	or	r18, r24
	
	/***Ejemplo de termómetro digital para salida en LCD***/
	char ascii_temp [10];
	float temp = (TenBitResult*150/307);//Conversión a grados C
 1e0:	46 e9       	ldi	r20, 0x96	; 150
 1e2:	42 9f       	mul	r20, r18
 1e4:	c0 01       	movw	r24, r0
 1e6:	43 9f       	mul	r20, r19
 1e8:	90 0d       	add	r25, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	63 e3       	ldi	r22, 0x33	; 51
 1ee:	71 e0       	ldi	r23, 0x01	; 1
 1f0:	0e 94 46 03 	call	0x68c	; 0x68c <__udivmodhi4>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 09 03 	call	0x612	; 0x612 <__floatunsisf>
	//El LM35 entrega 1.5v cuando mide 150 grados
	//Por lo tanto: 5v   -> 1023
	//				1.5v -> x
	// x=((1.5v)*(1023))/5v=306.9
	dtostrf(temp, 4, 1, ascii_temp);	//4 es la cantidad de enteros,
 1fc:	8e 01       	movw	r16, r28
 1fe:	0f 5f       	subi	r16, 0xFF	; 255
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	44 e0       	ldi	r20, 0x04	; 4
 206:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <dtostrf>
										//1 es la cantidad de decimales										
	// Despliega los valores de las muestras del ADC al LCD
	lcd_i2c_col_row(9,1);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 a4 02 	call	0x548	; 0x548 <lcd_i2c_col_row>
	lcd_i2c_write_string(ascii_temp);
 212:	c8 01       	movw	r24, r16
 214:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_i2c_write_string>
	lcd_i2c_data(0xDF); //Caracter para indicar grados
 218:	8f ed       	ldi	r24, 0xDF	; 223
 21a:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_i2c_data>
	lcd_i2c_write_string("C");
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_i2c_write_string>
	//Comenzar otra conversion
	ADCSRA |= 1<<ADSC;
 226:	ea e7       	ldi	r30, 0x7A	; 122
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 83       	st	Z, r24
}
 230:	2a 96       	adiw	r28, 0x0a	; 10
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <ADC_WithInterrupt>:

void ADC_WithInterrupt(void)
{
	//Habilita el convertidor (encenderlo)
	ADCSRA |= 1 << ADEN;
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 68       	ori	r24, 0x80	; 128
 26e:	80 83       	st	Z, r24
			
	//Habilitar el prescaler fo=16,000,000Hz/50,000Hz=320;(tabla 76, pag.201)
	ADCSRA |= 1 << ADPS2;	//Factor de división = 128
 270:	80 81       	ld	r24, Z
 272:	84 60       	ori	r24, 0x04	; 4
 274:	80 83       	st	Z, r24
			
	//Resultado justificado a la izquierda (ADCH bit9-2, ADCL bit1-0)
	ADMUX |= 1 << ADLAR;
 276:	ac e7       	ldi	r26, 0x7C	; 124
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	8c 91       	ld	r24, X
 27c:	80 62       	ori	r24, 0x20	; 32
 27e:	8c 93       	st	X, r24
			
	//Seleccionar el voltaje de referencia REF1=0, REFS0=1
	//(AVCC with external capacitor at AREF pin)
	//Entrada AVcc= 5v y Aref= con un capacitor a GND
	//Internamente: Vref=0v a 5v
	ADMUX |= 1 << REFS0;
 280:	8c 91       	ld	r24, X
 282:	80 64       	ori	r24, 0x40	; 64
 284:	8c 93       	st	X, r24
			
	//Habiltar interrupciones del ADC
	ADCSRA |= 1 << ADIE;
 286:	80 81       	ld	r24, Z
 288:	88 60       	ori	r24, 0x08	; 8
 28a:	80 83       	st	Z, r24
			
	sei(); //Interrupciones generales
 28c:	78 94       	sei
			
	//Comenzar la conversión
	ADCSRA |= 1 << ADSC;
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
 294:	08 95       	ret

00000296 <__vector_23>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
 2b8:	11 c0       	rjmp	.+34     	; 0x2dc <__vector_23+0x46>
	//Realiza esta operación mientras voltaje de entrada > voltaje de referencia
	{
		lcd_i2c_col_row(1,2);
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 a4 02 	call	0x548	; 0x548 <lcd_i2c_col_row>
		lcd_i2c_write_string("Comparando...");
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_i2c_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	83 ec       	ldi	r24, 0xC3	; 195
 2ce:	99 e0       	ldi	r25, 0x09	; 9
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__vector_23+0x3a>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <__vector_23+0x44>
 2da:	00 00       	nop
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
 2dc:	00 b6       	in	r0, 0x30	; 48
 2de:	05 fc       	sbrc	r0, 5
 2e0:	ec cf       	rjmp	.-40     	; 0x2ba <__vector_23+0x24>
	{
		lcd_i2c_col_row(1,2);
		lcd_i2c_write_string("Comparando...");
		_delay_ms(200);
	}
	lcd_i2c_col_row(1,2);
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 a4 02 	call	0x548	; 0x548 <lcd_i2c_col_row>
	lcd_i2c_write_string("             ");
 2ea:	82 e1       	ldi	r24, 0x12	; 18
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_i2c_write_string>
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
 314:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
 318:	84 e1       	ldi	r24, 0x14	; 20
 31a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 324:	08 95       	ret

00000326 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
 326:	84 ea       	ldi	r24, 0xA4	; 164
 328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 32c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 330:	88 23       	and	r24, r24
 332:	e4 f7       	brge	.-8      	; 0x32c <start+0x6>
}
 334:	08 95       	ret

00000336 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
 336:	84 e9       	ldi	r24, 0x94	; 148
 338:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <stop+0xa>
 344:	00 c0       	rjmp	.+0      	; 0x346 <stop+0x10>
 346:	00 00       	nop
 348:	08 95       	ret

0000034a <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte a escribir
 34a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
 34e:	84 ec       	ldi	r24, 0xC4	; 196
 350:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 354:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 358:	88 23       	and	r24, r24
 35a:	e4 f7       	brge	.-8      	; 0x354 <write_i2c+0xa>
}
 35c:	08 95       	ret

0000035e <__vector_1>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(INT0_vect)
{
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	2f 93       	push	r18
 36a:	3f 93       	push	r19
 36c:	4f 93       	push	r20
 36e:	5f 93       	push	r21
 370:	6f 93       	push	r22
 372:	7f 93       	push	r23
 374:	8f 93       	push	r24
 376:	9f 93       	push	r25
 378:	af 93       	push	r26
 37a:	bf 93       	push	r27
 37c:	ef 93       	push	r30
 37e:	ff 93       	push	r31
	lcd_i2c_col_row(3,2);
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0e 94 a4 02 	call	0x548	; 0x548 <lcd_i2c_col_row>
	lcd_i2c_write_string("recibe INT0 ");
 388:	80 e2       	ldi	r24, 0x20	; 32
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_i2c_write_string>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	81 ee       	ldi	r24, 0xE1	; 225
 394:	94 e0       	ldi	r25, 0x04	; 4
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <__vector_1+0x38>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <__vector_1+0x42>
 3a0:	00 00       	nop
	_delay_ms(100);
	lcd_i2c_clr();
 3a2:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_i2c_clr>
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <init_ports>:
 */ 
#include <avr/io.h>
void init_ports (void)
{
	// Define puerto B-->salida
	DDRB = 0xff;
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	84 b9       	out	0x04, r24	; 4
		PB4			
		PB5			Power on LED
		PB6			
		PB7			
	*/
	DDRD &= 0 << PD2; //entrada de interrupci[on externa
 3cc:	8a b1       	in	r24, 0x0a	; 10
 3ce:	1a b8       	out	0x0a, r1	; 10
	PORTD |= 1 << PD2; //activa resistencia de PullUp.
 3d0:	8b b1       	in	r24, 0x0b	; 11
 3d2:	84 60       	ori	r24, 0x04	; 4
 3d4:	8b b9       	out	0x0b, r24	; 11
	
	// Salidas para interfaz a 2 hilos TWI
	DDRC|=(1<<PC4)|(1<<PC5);	// Como salida SDA y SCL
 3d6:	87 b1       	in	r24, 0x07	; 7
 3d8:	80 63       	ori	r24, 0x30	; 48
 3da:	87 b9       	out	0x07, r24	; 7
	PORTC|=(1<<PC4)|(1<<PC5);	// SDA y SCL con pull up.
 3dc:	88 b1       	in	r24, 0x08	; 8
 3de:	80 63       	ori	r24, 0x30	; 48
 3e0:	88 b9       	out	0x08, r24	; 8
 3e2:	08 95       	ret

000003e4 <lcd_i2c_reset>:
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_reset(void)
{
	//unsigned char dato;
	start();
 3e4:	0e 94 93 01 	call	0x326	; 0x326 <start>
	write_i2c(PCF8574_ADDR);
 3e8:	80 e7       	ldi	r24, 0x70	; 112
 3ea:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
	
	write_i2c(0xFF); //Esperar al menos 15 ms
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	89 ef       	ldi	r24, 0xF9	; 249
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <lcd_i2c_reset+0x16>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms(20);
	
	write_i2c(0x30+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=1
 406:	84 e3       	ldi	r24, 0x34	; 52
 408:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
	write_i2c(0x30);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=0
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
 412:	8f e3       	ldi	r24, 0x3F	; 63
 414:	9c e9       	ldi	r25, 0x9C	; 156
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
	_delay_ms(10);			//Espera al menos 4.1 ms
	
	write_i2c(0x30+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=1
 41e:	84 e3       	ldi	r24, 0x34	; 52
 420:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
	write_i2c(0x30);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=0
 424:	80 e3       	ldi	r24, 0x30	; 48
 426:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
 42a:	8f e9       	ldi	r24, 0x9F	; 159
 42c:	9f e0       	ldi	r25, 0x0F	; 15
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
	_delay_ms(1);			//Espera al menos 100 us
	
	write_i2c(0x30+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=1
 436:	84 e3       	ldi	r24, 0x34	; 52
 438:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
	write_i2c(0x30);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=0
 43c:	80 e3       	ldi	r24, 0x30	; 48
 43e:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
 442:	8f e9       	ldi	r24, 0x9F	; 159
 444:	9f e0       	ldi	r25, 0x0F	; 15
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
	_delay_ms(1);			//Espera al menos 100 us
	
	write_i2c(0x20+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=0 y E=1
 44e:	84 e2       	ldi	r24, 0x24	; 36
 450:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
	write_i2c(0x20);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=0 y E=0
 454:	80 e2       	ldi	r24, 0x20	; 32
 456:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
 45a:	8f e9       	ldi	r24, 0x9F	; 159
 45c:	9f e0       	ldi	r25, 0x0F	; 15
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
	_delay_ms(1);			//Espera al menos 100 us
	
	stop();
 466:	0e 94 9b 01 	call	0x336	; 0x336 <stop>
 46a:	08 95       	ret

0000046c <lcd_i2c_cmd>:
*	Función que escribe un comando al LCD
*	Entrada: comando en hexadecimal (p.e. 0x2C)
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_cmd (char cmd)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	c8 2f       	mov	r28, r24
	unsigned char data;
	start();
 472:	0e 94 93 01 	call	0x326	; 0x326 <start>
	write_i2c(PCF8574_ADDR);//Manda direccion del dispositivo
 476:	80 e7       	ldi	r24, 0x70	; 112
 478:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
	
	data=(cmd & 0xF0)|LCD_EN|LUZ_FONDO;
 47c:	dc 2f       	mov	r29, r28
 47e:	d0 7f       	andi	r29, 0xF0	; 240
	write_i2c(data);
 480:	8d 2f       	mov	r24, r29
 482:	8c 60       	ori	r24, 0x0C	; 12
 484:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	data=(cmd & 0xF0)|LUZ_FONDO;
	write_i2c(data);
 488:	8d 2f       	mov	r24, r29
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	data=((cmd << 4) & 0xF0)|LCD_EN|LUZ_FONDO;
 490:	80 e1       	ldi	r24, 0x10	; 16
 492:	c8 9f       	mul	r28, r24
 494:	e0 01       	movw	r28, r0
 496:	11 24       	eor	r1, r1
	write_i2c(data);
 498:	8c 2f       	mov	r24, r28
 49a:	8c 60       	ori	r24, 0x0C	; 12
 49c:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	data=((cmd << 4) & (0xF0|LUZ_FONDO));
	write_i2c(data);
 4a0:	8c 2f       	mov	r24, r28
 4a2:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>
	
	stop();
 4a6:	0e 94 9b 01 	call	0x336	; 0x336 <stop>
 4aa:	8f e3       	ldi	r24, 0x3F	; 63
 4ac:	9f e1       	ldi	r25, 0x1F	; 31
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <lcd_i2c_cmd+0x42>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <lcd_i2c_cmd+0x48>
 4b4:	00 00       	nop
 4b6:	8f e3       	ldi	r24, 0x3F	; 63
 4b8:	9f e1       	ldi	r25, 0x1F	; 31
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <lcd_i2c_cmd+0x4e>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <lcd_i2c_cmd+0x54>
 4c0:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <lcd_i2c_init>:
*	Entrada: Ninguna
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_init (void)
{
	init_i2c(); 
 4c8:	0e 94 8a 01 	call	0x314	; 0x314 <init_i2c>

	lcd_i2c_reset();        // Reset para el LCD.
 4cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_i2c_reset>
	
	lcd_i2c_cmd(0x2C);		// Function Set: Modo 4 bits, 2 líneas, resolución 5×10.
 4d0:	8c e2       	ldi	r24, 0x2C	; 44
 4d2:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_i2c_cmd>
	//lcd_i2c_cmd(0x0F);      // Display control: LCD encendido, cursor encendido, parpadeo.
	lcd_i2c_cmd(0x0C);		//Cursor apagado.
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_i2c_cmd>
	lcd_i2c_cmd(0x06);      // Entry mode: Increment.
 4dc:	86 e0       	ldi	r24, 0x06	; 6
 4de:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_i2c_cmd>
	lcd_i2c_cmd(0x80);      // Apunta a la dirección de la DDRAM.
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_i2c_cmd>
 4e8:	08 95       	ret

000004ea <lcd_i2c_data>:
*	Función que despliega un solo caracter
*	Entrada: caracter entre comillas sencillas (p.e. 'A')
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_data (unsigned char dat)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	c8 2f       	mov	r28, r24
	unsigned char data;
	start();
 4f0:	0e 94 93 01 	call	0x326	; 0x326 <start>
	write_i2c(PCF8574_ADDR);
 4f4:	80 e7       	ldi	r24, 0x70	; 112
 4f6:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	data=((dat & 0xF0)|LCD_EN|LCD_RS|LUZ_FONDO);
 4fa:	dc 2f       	mov	r29, r28
 4fc:	d0 7f       	andi	r29, 0xF0	; 240
	write_i2c(data);
 4fe:	8d 2f       	mov	r24, r29
 500:	8d 60       	ori	r24, 0x0D	; 13
 502:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	data=((dat & 0xF0)|LCD_RS|LUZ_FONDO);
	write_i2c(data);
 506:	8d 2f       	mov	r24, r29
 508:	89 60       	ori	r24, 0x09	; 9
 50a:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	data=(((dat << 4) & 0xF0)|LCD_EN|LCD_RS|LUZ_FONDO);
 50e:	80 e1       	ldi	r24, 0x10	; 16
 510:	c8 9f       	mul	r28, r24
 512:	e0 01       	movw	r28, r0
 514:	11 24       	eor	r1, r1
	write_i2c(data);
 516:	8c 2f       	mov	r24, r28
 518:	8d 60       	ori	r24, 0x0D	; 13
 51a:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	data=(((dat << 4) & 0xF0)|LCD_RS|LUZ_FONDO);
	write_i2c(data);
 51e:	8c 2f       	mov	r24, r28
 520:	89 60       	ori	r24, 0x09	; 9
 522:	0e 94 a5 01 	call	0x34a	; 0x34a <write_i2c>

	stop();
 526:	0e 94 9b 01 	call	0x336	; 0x336 <stop>
 52a:	8f e3       	ldi	r24, 0x3F	; 63
 52c:	9f e1       	ldi	r25, 0x1F	; 31
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <lcd_i2c_data+0x44>
 532:	00 c0       	rjmp	.+0      	; 0x534 <lcd_i2c_data+0x4a>
 534:	00 00       	nop
 536:	8f e3       	ldi	r24, 0x3F	; 63
 538:	9f e1       	ldi	r25, 0x1F	; 31
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_i2c_data+0x50>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <lcd_i2c_data+0x56>
 540:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <lcd_i2c_col_row>:
*	Entrada: Columna y Renglón (1,1)
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_col_row(uint8_t x, uint8_t y)
{
	lcd_i2c_cmd(0x80 + Columna_1[y-1]+(x-1));
 548:	e6 2f       	mov	r30, r22
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	e1 50       	subi	r30, 0x01	; 1
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	90 81       	ld	r25, Z
 552:	89 0f       	add	r24, r25
 554:	81 58       	subi	r24, 0x81	; 129
 556:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_i2c_cmd>
 55a:	08 95       	ret

0000055c <lcd_i2c_clr>:
*	Entrada: Nada
*	Salida: Nada
*********************************************************/
void lcd_i2c_clr(void)
{
	lcd_i2c_cmd(0x01); //Limpia la pantalla (0000 0001)
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 36 02 	call	0x46c	; 0x46c <lcd_i2c_cmd>
 562:	8f e3       	ldi	r24, 0x3F	; 63
 564:	9f e1       	ldi	r25, 0x1F	; 31
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <lcd_i2c_clr+0xa>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <lcd_i2c_clr+0x10>
 56c:	00 00       	nop
 56e:	08 95       	ret

00000570 <lcd_i2c_write_string>:
*	Despliega una cadena de caracteres
*	Entrada: Cadena de caracteres entre comillas (p.e. "Hola LCD..")
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	d0 e0       	ldi	r29, 0x00	; 0
 57e:	03 c0       	rjmp	.+6      	; 0x586 <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 580:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_i2c_data>
*	Salida: Ninguna
*********************************************************/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 584:	21 96       	adiw	r28, 0x01	; 1
 586:	f8 01       	movw	r30, r16
 588:	ec 0f       	add	r30, r28
 58a:	fd 1f       	adc	r31, r29
 58c:	80 81       	ld	r24, Z
 58e:	81 11       	cpse	r24, r1
 590:	f7 cf       	rjmp	.-18     	; 0x580 <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <power_on>:

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	19 c0       	rjmp	.+50     	; 0x5d4 <power_on+0x38>
	{
		PORTB &= 0 << PB5; //Led on
 5a2:	85 b1       	in	r24, 0x05	; 5
 5a4:	15 b8       	out	0x05, r1	; 5
 5a6:	4f ef       	ldi	r20, 0xFF	; 255
 5a8:	81 ee       	ldi	r24, 0xE1	; 225
 5aa:	94 e0       	ldi	r25, 0x04	; 4
 5ac:	41 50       	subi	r20, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <power_on+0x10>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <power_on+0x1a>
 5b6:	00 00       	nop
		_delay_ms(100);
		PORTB |= 1 << PB5; //Led off
 5b8:	85 b1       	in	r24, 0x05	; 5
 5ba:	80 62       	ori	r24, 0x20	; 32
 5bc:	85 b9       	out	0x05, r24	; 5
 5be:	4f ef       	ldi	r20, 0xFF	; 255
 5c0:	81 ee       	ldi	r24, 0xE1	; 225
 5c2:	94 e0       	ldi	r25, 0x04	; 4
 5c4:	41 50       	subi	r20, 0x01	; 1
 5c6:	80 40       	sbci	r24, 0x00	; 0
 5c8:	90 40       	sbci	r25, 0x00	; 0
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <power_on+0x28>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <power_on+0x32>
 5ce:	00 00       	nop

void power_on (void)
{
	int i;
	
	for (i = 0;i < 5;i++)
 5d0:	2f 5f       	subi	r18, 0xFF	; 255
 5d2:	3f 4f       	sbci	r19, 0xFF	; 255
 5d4:	25 30       	cpi	r18, 0x05	; 5
 5d6:	31 05       	cpc	r19, r1
 5d8:	24 f3       	brlt	.-56     	; 0x5a2 <power_on+0x6>
		PORTB &= 0 << PB5; //Led on
		_delay_ms(100);
		PORTB |= 1 << PB5; //Led off
		_delay_ms(100);
	}
 5da:	08 95       	ret

000005dc <main>:

int main(void)
{
    /* Replace with your application code */

	init_ports();
 5dc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init_ports>
	
	power_on(); //LED para indicar que el programa esta funcionando
 5e0:	0e 94 ce 02 	call	0x59c	; 0x59c <power_on>
		
	/************************************************************************
	* USO DEL LCD CON I2C
	************************************************************************/
	lcd_i2c_init();
 5e4:	0e 94 64 02 	call	0x4c8	; 0x4c8 <lcd_i2c_init>
	lcd_i2c_col_row(1,1);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 a4 02 	call	0x548	; 0x548 <lcd_i2c_col_row>
	lcd_i2c_write_string("Inicia LCD... ");
 5f0:	8d e2       	ldi	r24, 0x2D	; 45
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_i2c_write_string>
	************************************************************************/
	//init_comp();
	/************************************************************************
	* USO DEL ADC CON SENSOR DE TEMPERATURA LM35 E INTERRUPCIONES
	************************************************************************/
	lcd_i2c_clr();	//limpia LCD
 5f8:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_i2c_clr>
	lcd_i2c_col_row(4,1);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	0e 94 a4 02 	call	0x548	; 0x548 <lcd_i2c_col_row>
	lcd_i2c_write_string("TEMP:");
 604:	8c e3       	ldi	r24, 0x3C	; 60
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_i2c_write_string>
	ADC_WithInterrupt();
 60c:	0e 94 33 01 	call	0x266	; 0x266 <ADC_WithInterrupt>
 610:	ff cf       	rjmp	.-2      	; 0x610 <main+0x34>

00000612 <__floatunsisf>:
 612:	e8 94       	clt
 614:	09 c0       	rjmp	.+18     	; 0x628 <__floatsisf+0x12>

00000616 <__floatsisf>:
 616:	97 fb       	bst	r25, 7
 618:	3e f4       	brtc	.+14     	; 0x628 <__floatsisf+0x12>
 61a:	90 95       	com	r25
 61c:	80 95       	com	r24
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	99 23       	and	r25, r25
 62a:	a9 f0       	breq	.+42     	; 0x656 <__floatsisf+0x40>
 62c:	f9 2f       	mov	r31, r25
 62e:	96 e9       	ldi	r25, 0x96	; 150
 630:	bb 27       	eor	r27, r27
 632:	93 95       	inc	r25
 634:	f6 95       	lsr	r31
 636:	87 95       	ror	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f1 11       	cpse	r31, r1
 640:	f8 cf       	rjmp	.-16     	; 0x632 <__floatsisf+0x1c>
 642:	fa f4       	brpl	.+62     	; 0x682 <__floatsisf+0x6c>
 644:	bb 0f       	add	r27, r27
 646:	11 f4       	brne	.+4      	; 0x64c <__floatsisf+0x36>
 648:	60 ff       	sbrs	r22, 0
 64a:	1b c0       	rjmp	.+54     	; 0x682 <__floatsisf+0x6c>
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	16 c0       	rjmp	.+44     	; 0x682 <__floatsisf+0x6c>
 656:	88 23       	and	r24, r24
 658:	11 f0       	breq	.+4      	; 0x65e <__floatsisf+0x48>
 65a:	96 e9       	ldi	r25, 0x96	; 150
 65c:	11 c0       	rjmp	.+34     	; 0x680 <__floatsisf+0x6a>
 65e:	77 23       	and	r23, r23
 660:	21 f0       	breq	.+8      	; 0x66a <__floatsisf+0x54>
 662:	9e e8       	ldi	r25, 0x8E	; 142
 664:	87 2f       	mov	r24, r23
 666:	76 2f       	mov	r23, r22
 668:	05 c0       	rjmp	.+10     	; 0x674 <__floatsisf+0x5e>
 66a:	66 23       	and	r22, r22
 66c:	71 f0       	breq	.+28     	; 0x68a <__floatsisf+0x74>
 66e:	96 e8       	ldi	r25, 0x86	; 134
 670:	86 2f       	mov	r24, r22
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	2a f0       	brmi	.+10     	; 0x682 <__floatsisf+0x6c>
 678:	9a 95       	dec	r25
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	da f7       	brpl	.-10     	; 0x678 <__floatsisf+0x62>
 682:	88 0f       	add	r24, r24
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__udivmodhi4>:
 68c:	aa 1b       	sub	r26, r26
 68e:	bb 1b       	sub	r27, r27
 690:	51 e1       	ldi	r21, 0x11	; 17
 692:	07 c0       	rjmp	.+14     	; 0x6a2 <__udivmodhi4_ep>

00000694 <__udivmodhi4_loop>:
 694:	aa 1f       	adc	r26, r26
 696:	bb 1f       	adc	r27, r27
 698:	a6 17       	cp	r26, r22
 69a:	b7 07       	cpc	r27, r23
 69c:	10 f0       	brcs	.+4      	; 0x6a2 <__udivmodhi4_ep>
 69e:	a6 1b       	sub	r26, r22
 6a0:	b7 0b       	sbc	r27, r23

000006a2 <__udivmodhi4_ep>:
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	5a 95       	dec	r21
 6a8:	a9 f7       	brne	.-22     	; 0x694 <__udivmodhi4_loop>
 6aa:	80 95       	com	r24
 6ac:	90 95       	com	r25
 6ae:	bc 01       	movw	r22, r24
 6b0:	cd 01       	movw	r24, r26
 6b2:	08 95       	ret

000006b4 <dtostrf>:
 6b4:	ef 92       	push	r14
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	e8 01       	movw	r28, r16
 6c0:	47 fd       	sbrc	r20, 7
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <dtostrf+0x14>
 6c4:	34 e0       	ldi	r19, 0x04	; 4
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <dtostrf+0x16>
 6c8:	34 e1       	ldi	r19, 0x14	; 20
 6ca:	04 2e       	mov	r0, r20
 6cc:	00 0c       	add	r0, r0
 6ce:	55 0b       	sbc	r21, r21
 6d0:	57 ff       	sbrs	r21, 7
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <dtostrf+0x26>
 6d4:	51 95       	neg	r21
 6d6:	41 95       	neg	r20
 6d8:	51 09       	sbc	r21, r1
 6da:	e3 2e       	mov	r14, r19
 6dc:	02 2f       	mov	r16, r18
 6de:	24 2f       	mov	r18, r20
 6e0:	ae 01       	movw	r20, r28
 6e2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <dtoa_prf>
 6e6:	ce 01       	movw	r24, r28
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	ef 90       	pop	r14
 6f2:	08 95       	ret

000006f4 <dtoa_prf>:
 6f4:	a9 e0       	ldi	r26, 0x09	; 9
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e0 e8       	ldi	r30, 0x80	; 128
 6fa:	f3 e0       	ldi	r31, 0x03	; 3
 6fc:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__prologue_saves__+0xc>
 700:	6a 01       	movw	r12, r20
 702:	12 2f       	mov	r17, r18
 704:	b0 2e       	mov	r11, r16
 706:	2b e3       	ldi	r18, 0x3B	; 59
 708:	20 17       	cp	r18, r16
 70a:	20 f0       	brcs	.+8      	; 0x714 <dtoa_prf+0x20>
 70c:	ff 24       	eor	r15, r15
 70e:	f3 94       	inc	r15
 710:	f0 0e       	add	r15, r16
 712:	02 c0       	rjmp	.+4      	; 0x718 <dtoa_prf+0x24>
 714:	2c e3       	ldi	r18, 0x3C	; 60
 716:	f2 2e       	mov	r15, r18
 718:	0f 2d       	mov	r16, r15
 71a:	27 e0       	ldi	r18, 0x07	; 7
 71c:	ae 01       	movw	r20, r28
 71e:	4f 5f       	subi	r20, 0xFF	; 255
 720:	5f 4f       	sbci	r21, 0xFF	; 255
 722:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ftoa_engine>
 726:	bc 01       	movw	r22, r24
 728:	49 81       	ldd	r20, Y+1	; 0x01
 72a:	84 2f       	mov	r24, r20
 72c:	89 70       	andi	r24, 0x09	; 9
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	31 f0       	breq	.+12     	; 0x73e <dtoa_prf+0x4a>
 732:	e1 fc       	sbrc	r14, 1
 734:	06 c0       	rjmp	.+12     	; 0x742 <dtoa_prf+0x4e>
 736:	e0 fe       	sbrs	r14, 0
 738:	06 c0       	rjmp	.+12     	; 0x746 <dtoa_prf+0x52>
 73a:	90 e2       	ldi	r25, 0x20	; 32
 73c:	05 c0       	rjmp	.+10     	; 0x748 <dtoa_prf+0x54>
 73e:	9d e2       	ldi	r25, 0x2D	; 45
 740:	03 c0       	rjmp	.+6      	; 0x748 <dtoa_prf+0x54>
 742:	9b e2       	ldi	r25, 0x2B	; 43
 744:	01 c0       	rjmp	.+2      	; 0x748 <dtoa_prf+0x54>
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	5e 2d       	mov	r21, r14
 74a:	50 71       	andi	r21, 0x10	; 16
 74c:	43 ff       	sbrs	r20, 3
 74e:	3c c0       	rjmp	.+120    	; 0x7c8 <dtoa_prf+0xd4>
 750:	91 11       	cpse	r25, r1
 752:	02 c0       	rjmp	.+4      	; 0x758 <dtoa_prf+0x64>
 754:	83 e0       	ldi	r24, 0x03	; 3
 756:	01 c0       	rjmp	.+2      	; 0x75a <dtoa_prf+0x66>
 758:	84 e0       	ldi	r24, 0x04	; 4
 75a:	81 17       	cp	r24, r17
 75c:	18 f4       	brcc	.+6      	; 0x764 <dtoa_prf+0x70>
 75e:	21 2f       	mov	r18, r17
 760:	28 1b       	sub	r18, r24
 762:	01 c0       	rjmp	.+2      	; 0x766 <dtoa_prf+0x72>
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	51 11       	cpse	r21, r1
 768:	0b c0       	rjmp	.+22     	; 0x780 <dtoa_prf+0x8c>
 76a:	f6 01       	movw	r30, r12
 76c:	82 2f       	mov	r24, r18
 76e:	30 e2       	ldi	r19, 0x20	; 32
 770:	88 23       	and	r24, r24
 772:	19 f0       	breq	.+6      	; 0x77a <dtoa_prf+0x86>
 774:	31 93       	st	Z+, r19
 776:	81 50       	subi	r24, 0x01	; 1
 778:	fb cf       	rjmp	.-10     	; 0x770 <dtoa_prf+0x7c>
 77a:	c2 0e       	add	r12, r18
 77c:	d1 1c       	adc	r13, r1
 77e:	20 e0       	ldi	r18, 0x00	; 0
 780:	99 23       	and	r25, r25
 782:	29 f0       	breq	.+10     	; 0x78e <dtoa_prf+0x9a>
 784:	d6 01       	movw	r26, r12
 786:	9c 93       	st	X, r25
 788:	f6 01       	movw	r30, r12
 78a:	31 96       	adiw	r30, 0x01	; 1
 78c:	6f 01       	movw	r12, r30
 78e:	c6 01       	movw	r24, r12
 790:	03 96       	adiw	r24, 0x03	; 3
 792:	e2 fe       	sbrs	r14, 2
 794:	0a c0       	rjmp	.+20     	; 0x7aa <dtoa_prf+0xb6>
 796:	3e e4       	ldi	r19, 0x4E	; 78
 798:	d6 01       	movw	r26, r12
 79a:	3c 93       	st	X, r19
 79c:	41 e4       	ldi	r20, 0x41	; 65
 79e:	11 96       	adiw	r26, 0x01	; 1
 7a0:	4c 93       	st	X, r20
 7a2:	11 97       	sbiw	r26, 0x01	; 1
 7a4:	12 96       	adiw	r26, 0x02	; 2
 7a6:	3c 93       	st	X, r19
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <dtoa_prf+0xc2>
 7aa:	3e e6       	ldi	r19, 0x6E	; 110
 7ac:	f6 01       	movw	r30, r12
 7ae:	30 83       	st	Z, r19
 7b0:	41 e6       	ldi	r20, 0x61	; 97
 7b2:	41 83       	std	Z+1, r20	; 0x01
 7b4:	32 83       	std	Z+2, r19	; 0x02
 7b6:	fc 01       	movw	r30, r24
 7b8:	32 2f       	mov	r19, r18
 7ba:	40 e2       	ldi	r20, 0x20	; 32
 7bc:	33 23       	and	r19, r19
 7be:	09 f4       	brne	.+2      	; 0x7c2 <dtoa_prf+0xce>
 7c0:	42 c0       	rjmp	.+132    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7c2:	41 93       	st	Z+, r20
 7c4:	31 50       	subi	r19, 0x01	; 1
 7c6:	fa cf       	rjmp	.-12     	; 0x7bc <dtoa_prf+0xc8>
 7c8:	42 ff       	sbrs	r20, 2
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 7cc:	91 11       	cpse	r25, r1
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <dtoa_prf+0xe0>
 7d0:	83 e0       	ldi	r24, 0x03	; 3
 7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <dtoa_prf+0xe2>
 7d4:	84 e0       	ldi	r24, 0x04	; 4
 7d6:	81 17       	cp	r24, r17
 7d8:	18 f4       	brcc	.+6      	; 0x7e0 <dtoa_prf+0xec>
 7da:	21 2f       	mov	r18, r17
 7dc:	28 1b       	sub	r18, r24
 7de:	01 c0       	rjmp	.+2      	; 0x7e2 <dtoa_prf+0xee>
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	51 11       	cpse	r21, r1
 7e4:	0b c0       	rjmp	.+22     	; 0x7fc <dtoa_prf+0x108>
 7e6:	f6 01       	movw	r30, r12
 7e8:	82 2f       	mov	r24, r18
 7ea:	30 e2       	ldi	r19, 0x20	; 32
 7ec:	88 23       	and	r24, r24
 7ee:	19 f0       	breq	.+6      	; 0x7f6 <dtoa_prf+0x102>
 7f0:	31 93       	st	Z+, r19
 7f2:	81 50       	subi	r24, 0x01	; 1
 7f4:	fb cf       	rjmp	.-10     	; 0x7ec <dtoa_prf+0xf8>
 7f6:	c2 0e       	add	r12, r18
 7f8:	d1 1c       	adc	r13, r1
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	99 23       	and	r25, r25
 7fe:	29 f0       	breq	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	d6 01       	movw	r26, r12
 802:	9c 93       	st	X, r25
 804:	f6 01       	movw	r30, r12
 806:	31 96       	adiw	r30, 0x01	; 1
 808:	6f 01       	movw	r12, r30
 80a:	c6 01       	movw	r24, r12
 80c:	03 96       	adiw	r24, 0x03	; 3
 80e:	e2 fe       	sbrs	r14, 2
 810:	0b c0       	rjmp	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 812:	39 e4       	ldi	r19, 0x49	; 73
 814:	d6 01       	movw	r26, r12
 816:	3c 93       	st	X, r19
 818:	3e e4       	ldi	r19, 0x4E	; 78
 81a:	11 96       	adiw	r26, 0x01	; 1
 81c:	3c 93       	st	X, r19
 81e:	11 97       	sbiw	r26, 0x01	; 1
 820:	36 e4       	ldi	r19, 0x46	; 70
 822:	12 96       	adiw	r26, 0x02	; 2
 824:	3c 93       	st	X, r19
 826:	07 c0       	rjmp	.+14     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 828:	39 e6       	ldi	r19, 0x69	; 105
 82a:	f6 01       	movw	r30, r12
 82c:	30 83       	st	Z, r19
 82e:	3e e6       	ldi	r19, 0x6E	; 110
 830:	31 83       	std	Z+1, r19	; 0x01
 832:	36 e6       	ldi	r19, 0x66	; 102
 834:	32 83       	std	Z+2, r19	; 0x02
 836:	fc 01       	movw	r30, r24
 838:	32 2f       	mov	r19, r18
 83a:	40 e2       	ldi	r20, 0x20	; 32
 83c:	33 23       	and	r19, r19
 83e:	19 f0       	breq	.+6      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 840:	41 93       	st	Z+, r20
 842:	31 50       	subi	r19, 0x01	; 1
 844:	fb cf       	rjmp	.-10     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 846:	fc 01       	movw	r30, r24
 848:	e2 0f       	add	r30, r18
 84a:	f1 1d       	adc	r31, r1
 84c:	10 82       	st	Z, r1
 84e:	8e ef       	ldi	r24, 0xFE	; 254
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	a6 c0       	rjmp	.+332    	; 0x9a0 <__stack+0xa1>
 854:	21 e0       	ldi	r18, 0x01	; 1
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	91 11       	cpse	r25, r1
 85a:	02 c0       	rjmp	.+4      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	1c f4       	brge	.+6      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 866:	fb 01       	movw	r30, r22
 868:	31 96       	adiw	r30, 0x01	; 1
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86c:	e1 e0       	ldi	r30, 0x01	; 1
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	2e 0f       	add	r18, r30
 872:	3f 1f       	adc	r19, r31
 874:	bb 20       	and	r11, r11
 876:	21 f0       	breq	.+8      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 878:	eb 2d       	mov	r30, r11
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	31 96       	adiw	r30, 0x01	; 1
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 880:	e0 e0       	ldi	r30, 0x00	; 0
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	2e 0f       	add	r18, r30
 886:	3f 1f       	adc	r19, r31
 888:	e1 2f       	mov	r30, r17
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	2e 17       	cp	r18, r30
 88e:	3f 07       	cpc	r19, r31
 890:	1c f4       	brge	.+6      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 892:	12 1b       	sub	r17, r18
 894:	21 2f       	mov	r18, r17
 896:	01 c0       	rjmp	.+2      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	8e 2d       	mov	r24, r14
 89c:	88 71       	andi	r24, 0x18	; 24
 89e:	59 f4       	brne	.+22     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8a0:	f6 01       	movw	r30, r12
 8a2:	82 2f       	mov	r24, r18
 8a4:	30 e2       	ldi	r19, 0x20	; 32
 8a6:	88 23       	and	r24, r24
 8a8:	19 f0       	breq	.+6      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8aa:	31 93       	st	Z+, r19
 8ac:	81 50       	subi	r24, 0x01	; 1
 8ae:	fb cf       	rjmp	.-10     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 8b0:	c2 0e       	add	r12, r18
 8b2:	d1 1c       	adc	r13, r1
 8b4:	20 e0       	ldi	r18, 0x00	; 0
 8b6:	99 23       	and	r25, r25
 8b8:	29 f0       	breq	.+10     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8ba:	d6 01       	movw	r26, r12
 8bc:	9c 93       	st	X, r25
 8be:	f6 01       	movw	r30, r12
 8c0:	31 96       	adiw	r30, 0x01	; 1
 8c2:	6f 01       	movw	r12, r30
 8c4:	51 11       	cpse	r21, r1
 8c6:	0b c0       	rjmp	.+22     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8c8:	f6 01       	movw	r30, r12
 8ca:	82 2f       	mov	r24, r18
 8cc:	90 e3       	ldi	r25, 0x30	; 48
 8ce:	88 23       	and	r24, r24
 8d0:	19 f0       	breq	.+6      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8d2:	91 93       	st	Z+, r25
 8d4:	81 50       	subi	r24, 0x01	; 1
 8d6:	fb cf       	rjmp	.-10     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8d8:	c2 0e       	add	r12, r18
 8da:	d1 1c       	adc	r13, r1
 8dc:	20 e0       	ldi	r18, 0x00	; 0
 8de:	0f 2d       	mov	r16, r15
 8e0:	06 0f       	add	r16, r22
 8e2:	9a 81       	ldd	r25, Y+2	; 0x02
 8e4:	34 2f       	mov	r19, r20
 8e6:	30 71       	andi	r19, 0x10	; 16
 8e8:	44 ff       	sbrs	r20, 4
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8ec:	91 33       	cpi	r25, 0x31	; 49
 8ee:	09 f4       	brne	.+2      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8f0:	01 50       	subi	r16, 0x01	; 1
 8f2:	10 16       	cp	r1, r16
 8f4:	24 f4       	brge	.+8      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8f6:	09 30       	cpi	r16, 0x09	; 9
 8f8:	18 f0       	brcs	.+6      	; 0x900 <__stack+0x1>
 8fa:	08 e0       	ldi	r16, 0x08	; 8
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <__stack+0x1>
 8fe:	01 e0       	ldi	r16, 0x01	; 1
 900:	ab 01       	movw	r20, r22
 902:	77 ff       	sbrs	r23, 7
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
 906:	40 e0       	ldi	r20, 0x00	; 0
 908:	50 e0       	ldi	r21, 0x00	; 0
 90a:	fb 01       	movw	r30, r22
 90c:	e4 1b       	sub	r30, r20
 90e:	f5 0b       	sbc	r31, r21
 910:	a1 e0       	ldi	r26, 0x01	; 1
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	ac 0f       	add	r26, r28
 916:	bd 1f       	adc	r27, r29
 918:	ea 0f       	add	r30, r26
 91a:	fb 1f       	adc	r31, r27
 91c:	8e e2       	ldi	r24, 0x2E	; 46
 91e:	a8 2e       	mov	r10, r24
 920:	4b 01       	movw	r8, r22
 922:	80 1a       	sub	r8, r16
 924:	91 08       	sbc	r9, r1
 926:	0b 2d       	mov	r16, r11
 928:	10 e0       	ldi	r17, 0x00	; 0
 92a:	11 95       	neg	r17
 92c:	01 95       	neg	r16
 92e:	11 09       	sbc	r17, r1
 930:	4f 3f       	cpi	r20, 0xFF	; 255
 932:	bf ef       	ldi	r27, 0xFF	; 255
 934:	5b 07       	cpc	r21, r27
 936:	21 f4       	brne	.+8      	; 0x940 <__stack+0x41>
 938:	d6 01       	movw	r26, r12
 93a:	ac 92       	st	X, r10
 93c:	11 96       	adiw	r26, 0x01	; 1
 93e:	6d 01       	movw	r12, r26
 940:	64 17       	cp	r22, r20
 942:	75 07       	cpc	r23, r21
 944:	2c f0       	brlt	.+10     	; 0x950 <__stack+0x51>
 946:	84 16       	cp	r8, r20
 948:	95 06       	cpc	r9, r21
 94a:	14 f4       	brge	.+4      	; 0x950 <__stack+0x51>
 94c:	81 81       	ldd	r24, Z+1	; 0x01
 94e:	01 c0       	rjmp	.+2      	; 0x952 <__stack+0x53>
 950:	80 e3       	ldi	r24, 0x30	; 48
 952:	41 50       	subi	r20, 0x01	; 1
 954:	51 09       	sbc	r21, r1
 956:	31 96       	adiw	r30, 0x01	; 1
 958:	d6 01       	movw	r26, r12
 95a:	11 96       	adiw	r26, 0x01	; 1
 95c:	7d 01       	movw	r14, r26
 95e:	40 17       	cp	r20, r16
 960:	51 07       	cpc	r21, r17
 962:	24 f0       	brlt	.+8      	; 0x96c <__stack+0x6d>
 964:	d6 01       	movw	r26, r12
 966:	8c 93       	st	X, r24
 968:	67 01       	movw	r12, r14
 96a:	e2 cf       	rjmp	.-60     	; 0x930 <__stack+0x31>
 96c:	64 17       	cp	r22, r20
 96e:	75 07       	cpc	r23, r21
 970:	39 f4       	brne	.+14     	; 0x980 <__stack+0x81>
 972:	96 33       	cpi	r25, 0x36	; 54
 974:	20 f4       	brcc	.+8      	; 0x97e <__stack+0x7f>
 976:	95 33       	cpi	r25, 0x35	; 53
 978:	19 f4       	brne	.+6      	; 0x980 <__stack+0x81>
 97a:	31 11       	cpse	r19, r1
 97c:	01 c0       	rjmp	.+2      	; 0x980 <__stack+0x81>
 97e:	81 e3       	ldi	r24, 0x31	; 49
 980:	f6 01       	movw	r30, r12
 982:	80 83       	st	Z, r24
 984:	f7 01       	movw	r30, r14
 986:	82 2f       	mov	r24, r18
 988:	90 e2       	ldi	r25, 0x20	; 32
 98a:	88 23       	and	r24, r24
 98c:	19 f0       	breq	.+6      	; 0x994 <__stack+0x95>
 98e:	91 93       	st	Z+, r25
 990:	81 50       	subi	r24, 0x01	; 1
 992:	fb cf       	rjmp	.-10     	; 0x98a <__stack+0x8b>
 994:	f7 01       	movw	r30, r14
 996:	e2 0f       	add	r30, r18
 998:	f1 1d       	adc	r31, r1
 99a:	10 82       	st	Z, r1
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	29 96       	adiw	r28, 0x09	; 9
 9a2:	ec e0       	ldi	r30, 0x0C	; 12
 9a4:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__epilogue_restores__+0xc>

000009a8 <__ftoa_engine>:
 9a8:	28 30       	cpi	r18, 0x08	; 8
 9aa:	08 f0       	brcs	.+2      	; 0x9ae <__ftoa_engine+0x6>
 9ac:	27 e0       	ldi	r18, 0x07	; 7
 9ae:	33 27       	eor	r19, r19
 9b0:	da 01       	movw	r26, r20
 9b2:	99 0f       	add	r25, r25
 9b4:	31 1d       	adc	r19, r1
 9b6:	87 fd       	sbrc	r24, 7
 9b8:	91 60       	ori	r25, 0x01	; 1
 9ba:	00 96       	adiw	r24, 0x00	; 0
 9bc:	61 05       	cpc	r22, r1
 9be:	71 05       	cpc	r23, r1
 9c0:	39 f4       	brne	.+14     	; 0x9d0 <__ftoa_engine+0x28>
 9c2:	32 60       	ori	r19, 0x02	; 2
 9c4:	2e 5f       	subi	r18, 0xFE	; 254
 9c6:	3d 93       	st	X+, r19
 9c8:	30 e3       	ldi	r19, 0x30	; 48
 9ca:	2a 95       	dec	r18
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <__ftoa_engine+0x1e>
 9ce:	08 95       	ret
 9d0:	9f 3f       	cpi	r25, 0xFF	; 255
 9d2:	30 f0       	brcs	.+12     	; 0x9e0 <__ftoa_engine+0x38>
 9d4:	80 38       	cpi	r24, 0x80	; 128
 9d6:	71 05       	cpc	r23, r1
 9d8:	61 05       	cpc	r22, r1
 9da:	09 f0       	breq	.+2      	; 0x9de <__ftoa_engine+0x36>
 9dc:	3c 5f       	subi	r19, 0xFC	; 252
 9de:	3c 5f       	subi	r19, 0xFC	; 252
 9e0:	3d 93       	st	X+, r19
 9e2:	91 30       	cpi	r25, 0x01	; 1
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <__ftoa_engine+0x40>
 9e6:	80 68       	ori	r24, 0x80	; 128
 9e8:	91 1d       	adc	r25, r1
 9ea:	df 93       	push	r29
 9ec:	cf 93       	push	r28
 9ee:	1f 93       	push	r17
 9f0:	0f 93       	push	r16
 9f2:	ff 92       	push	r15
 9f4:	ef 92       	push	r14
 9f6:	19 2f       	mov	r17, r25
 9f8:	98 7f       	andi	r25, 0xF8	; 248
 9fa:	96 95       	lsr	r25
 9fc:	e9 2f       	mov	r30, r25
 9fe:	96 95       	lsr	r25
 a00:	96 95       	lsr	r25
 a02:	e9 0f       	add	r30, r25
 a04:	ff 27       	eor	r31, r31
 a06:	ee 53       	subi	r30, 0x3E	; 62
 a08:	ff 4f       	sbci	r31, 0xFF	; 255
 a0a:	99 27       	eor	r25, r25
 a0c:	33 27       	eor	r19, r19
 a0e:	ee 24       	eor	r14, r14
 a10:	ff 24       	eor	r15, r15
 a12:	a7 01       	movw	r20, r14
 a14:	e7 01       	movw	r28, r14
 a16:	05 90       	lpm	r0, Z+
 a18:	08 94       	sec
 a1a:	07 94       	ror	r0
 a1c:	28 f4       	brcc	.+10     	; 0xa28 <__ftoa_engine+0x80>
 a1e:	36 0f       	add	r19, r22
 a20:	e7 1e       	adc	r14, r23
 a22:	f8 1e       	adc	r15, r24
 a24:	49 1f       	adc	r20, r25
 a26:	51 1d       	adc	r21, r1
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	06 94       	lsr	r0
 a32:	a1 f7       	brne	.-24     	; 0xa1c <__ftoa_engine+0x74>
 a34:	05 90       	lpm	r0, Z+
 a36:	07 94       	ror	r0
 a38:	28 f4       	brcc	.+10     	; 0xa44 <__ftoa_engine+0x9c>
 a3a:	e7 0e       	add	r14, r23
 a3c:	f8 1e       	adc	r15, r24
 a3e:	49 1f       	adc	r20, r25
 a40:	56 1f       	adc	r21, r22
 a42:	c1 1d       	adc	r28, r1
 a44:	77 0f       	add	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	66 1f       	adc	r22, r22
 a4c:	06 94       	lsr	r0
 a4e:	a1 f7       	brne	.-24     	; 0xa38 <__ftoa_engine+0x90>
 a50:	05 90       	lpm	r0, Z+
 a52:	07 94       	ror	r0
 a54:	28 f4       	brcc	.+10     	; 0xa60 <__ftoa_engine+0xb8>
 a56:	f8 0e       	add	r15, r24
 a58:	49 1f       	adc	r20, r25
 a5a:	56 1f       	adc	r21, r22
 a5c:	c7 1f       	adc	r28, r23
 a5e:	d1 1d       	adc	r29, r1
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	66 1f       	adc	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	06 94       	lsr	r0
 a6a:	a1 f7       	brne	.-24     	; 0xa54 <__ftoa_engine+0xac>
 a6c:	05 90       	lpm	r0, Z+
 a6e:	07 94       	ror	r0
 a70:	20 f4       	brcc	.+8      	; 0xa7a <__ftoa_engine+0xd2>
 a72:	49 0f       	add	r20, r25
 a74:	56 1f       	adc	r21, r22
 a76:	c7 1f       	adc	r28, r23
 a78:	d8 1f       	adc	r29, r24
 a7a:	99 0f       	add	r25, r25
 a7c:	66 1f       	adc	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	06 94       	lsr	r0
 a84:	a9 f7       	brne	.-22     	; 0xa70 <__ftoa_engine+0xc8>
 a86:	84 91       	lpm	r24, Z
 a88:	10 95       	com	r17
 a8a:	17 70       	andi	r17, 0x07	; 7
 a8c:	41 f0       	breq	.+16     	; 0xa9e <__ftoa_engine+0xf6>
 a8e:	d6 95       	lsr	r29
 a90:	c7 95       	ror	r28
 a92:	57 95       	ror	r21
 a94:	47 95       	ror	r20
 a96:	f7 94       	ror	r15
 a98:	e7 94       	ror	r14
 a9a:	1a 95       	dec	r17
 a9c:	c1 f7       	brne	.-16     	; 0xa8e <__ftoa_engine+0xe6>
 a9e:	e8 e6       	ldi	r30, 0x68	; 104
 aa0:	f0 e0       	ldi	r31, 0x00	; 0
 aa2:	68 94       	set
 aa4:	15 90       	lpm	r1, Z+
 aa6:	15 91       	lpm	r17, Z+
 aa8:	35 91       	lpm	r19, Z+
 aaa:	65 91       	lpm	r22, Z+
 aac:	95 91       	lpm	r25, Z+
 aae:	05 90       	lpm	r0, Z+
 ab0:	7f e2       	ldi	r23, 0x2F	; 47
 ab2:	73 95       	inc	r23
 ab4:	e1 18       	sub	r14, r1
 ab6:	f1 0a       	sbc	r15, r17
 ab8:	43 0b       	sbc	r20, r19
 aba:	56 0b       	sbc	r21, r22
 abc:	c9 0b       	sbc	r28, r25
 abe:	d0 09       	sbc	r29, r0
 ac0:	c0 f7       	brcc	.-16     	; 0xab2 <__ftoa_engine+0x10a>
 ac2:	e1 0c       	add	r14, r1
 ac4:	f1 1e       	adc	r15, r17
 ac6:	43 1f       	adc	r20, r19
 ac8:	56 1f       	adc	r21, r22
 aca:	c9 1f       	adc	r28, r25
 acc:	d0 1d       	adc	r29, r0
 ace:	7e f4       	brtc	.+30     	; 0xaee <__ftoa_engine+0x146>
 ad0:	70 33       	cpi	r23, 0x30	; 48
 ad2:	11 f4       	brne	.+4      	; 0xad8 <__ftoa_engine+0x130>
 ad4:	8a 95       	dec	r24
 ad6:	e6 cf       	rjmp	.-52     	; 0xaa4 <__ftoa_engine+0xfc>
 ad8:	e8 94       	clt
 ada:	01 50       	subi	r16, 0x01	; 1
 adc:	30 f0       	brcs	.+12     	; 0xaea <__ftoa_engine+0x142>
 ade:	08 0f       	add	r16, r24
 ae0:	0a f4       	brpl	.+2      	; 0xae4 <__ftoa_engine+0x13c>
 ae2:	00 27       	eor	r16, r16
 ae4:	02 17       	cp	r16, r18
 ae6:	08 f4       	brcc	.+2      	; 0xaea <__ftoa_engine+0x142>
 ae8:	20 2f       	mov	r18, r16
 aea:	23 95       	inc	r18
 aec:	02 2f       	mov	r16, r18
 aee:	7a 33       	cpi	r23, 0x3A	; 58
 af0:	28 f0       	brcs	.+10     	; 0xafc <__ftoa_engine+0x154>
 af2:	79 e3       	ldi	r23, 0x39	; 57
 af4:	7d 93       	st	X+, r23
 af6:	2a 95       	dec	r18
 af8:	e9 f7       	brne	.-6      	; 0xaf4 <__ftoa_engine+0x14c>
 afa:	10 c0       	rjmp	.+32     	; 0xb1c <__ftoa_engine+0x174>
 afc:	7d 93       	st	X+, r23
 afe:	2a 95       	dec	r18
 b00:	89 f6       	brne	.-94     	; 0xaa4 <__ftoa_engine+0xfc>
 b02:	06 94       	lsr	r0
 b04:	97 95       	ror	r25
 b06:	67 95       	ror	r22
 b08:	37 95       	ror	r19
 b0a:	17 95       	ror	r17
 b0c:	17 94       	ror	r1
 b0e:	e1 18       	sub	r14, r1
 b10:	f1 0a       	sbc	r15, r17
 b12:	43 0b       	sbc	r20, r19
 b14:	56 0b       	sbc	r21, r22
 b16:	c9 0b       	sbc	r28, r25
 b18:	d0 09       	sbc	r29, r0
 b1a:	98 f0       	brcs	.+38     	; 0xb42 <__ftoa_engine+0x19a>
 b1c:	23 95       	inc	r18
 b1e:	7e 91       	ld	r23, -X
 b20:	73 95       	inc	r23
 b22:	7a 33       	cpi	r23, 0x3A	; 58
 b24:	08 f0       	brcs	.+2      	; 0xb28 <__ftoa_engine+0x180>
 b26:	70 e3       	ldi	r23, 0x30	; 48
 b28:	7c 93       	st	X, r23
 b2a:	20 13       	cpse	r18, r16
 b2c:	b8 f7       	brcc	.-18     	; 0xb1c <__ftoa_engine+0x174>
 b2e:	7e 91       	ld	r23, -X
 b30:	70 61       	ori	r23, 0x10	; 16
 b32:	7d 93       	st	X+, r23
 b34:	30 f0       	brcs	.+12     	; 0xb42 <__ftoa_engine+0x19a>
 b36:	83 95       	inc	r24
 b38:	71 e3       	ldi	r23, 0x31	; 49
 b3a:	7d 93       	st	X+, r23
 b3c:	70 e3       	ldi	r23, 0x30	; 48
 b3e:	2a 95       	dec	r18
 b40:	e1 f7       	brne	.-8      	; 0xb3a <__ftoa_engine+0x192>
 b42:	11 24       	eor	r1, r1
 b44:	ef 90       	pop	r14
 b46:	ff 90       	pop	r15
 b48:	0f 91       	pop	r16
 b4a:	1f 91       	pop	r17
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	99 27       	eor	r25, r25
 b52:	87 fd       	sbrc	r24, 7
 b54:	90 95       	com	r25
 b56:	08 95       	ret

00000b58 <__prologue_saves__>:
 b58:	2f 92       	push	r2
 b5a:	3f 92       	push	r3
 b5c:	4f 92       	push	r4
 b5e:	5f 92       	push	r5
 b60:	6f 92       	push	r6
 b62:	7f 92       	push	r7
 b64:	8f 92       	push	r8
 b66:	9f 92       	push	r9
 b68:	af 92       	push	r10
 b6a:	bf 92       	push	r11
 b6c:	cf 92       	push	r12
 b6e:	df 92       	push	r13
 b70:	ef 92       	push	r14
 b72:	ff 92       	push	r15
 b74:	0f 93       	push	r16
 b76:	1f 93       	push	r17
 b78:	cf 93       	push	r28
 b7a:	df 93       	push	r29
 b7c:	cd b7       	in	r28, 0x3d	; 61
 b7e:	de b7       	in	r29, 0x3e	; 62
 b80:	ca 1b       	sub	r28, r26
 b82:	db 0b       	sbc	r29, r27
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
 b8e:	09 94       	ijmp

00000b90 <__epilogue_restores__>:
 b90:	2a 88       	ldd	r2, Y+18	; 0x12
 b92:	39 88       	ldd	r3, Y+17	; 0x11
 b94:	48 88       	ldd	r4, Y+16	; 0x10
 b96:	5f 84       	ldd	r5, Y+15	; 0x0f
 b98:	6e 84       	ldd	r6, Y+14	; 0x0e
 b9a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b9c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b9e:	9b 84       	ldd	r9, Y+11	; 0x0b
 ba0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ba2:	b9 84       	ldd	r11, Y+9	; 0x09
 ba4:	c8 84       	ldd	r12, Y+8	; 0x08
 ba6:	df 80       	ldd	r13, Y+7	; 0x07
 ba8:	ee 80       	ldd	r14, Y+6	; 0x06
 baa:	fd 80       	ldd	r15, Y+5	; 0x05
 bac:	0c 81       	ldd	r16, Y+4	; 0x04
 bae:	1b 81       	ldd	r17, Y+3	; 0x03
 bb0:	aa 81       	ldd	r26, Y+2	; 0x02
 bb2:	b9 81       	ldd	r27, Y+1	; 0x01
 bb4:	ce 0f       	add	r28, r30
 bb6:	d1 1d       	adc	r29, r1
 bb8:	0f b6       	in	r0, 0x3f	; 63
 bba:	f8 94       	cli
 bbc:	de bf       	out	0x3e, r29	; 62
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	cd bf       	out	0x3d, r28	; 61
 bc2:	ed 01       	movw	r28, r26
 bc4:	08 95       	ret

00000bc6 <_exit>:
 bc6:	f8 94       	cli

00000bc8 <__stop_program>:
 bc8:	ff cf       	rjmp	.-2      	; 0xbc8 <__stop_program>
