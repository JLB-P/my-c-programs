
m328p_ACRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009be  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f1  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051e  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  00001e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001fc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ports>:
 */ 
#include <avr/io.h>
void init_ports (void)
{
	//Timer
	DDRB |= (1 << PB1); //OC1A enable output for left motor
  80:	84 b1       	in	r24, 0x04	; 4
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2); //OC1B enable output for right motor
  86:	84 b1       	in	r24, 0x04	; 4
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	84 b9       	out	0x04, r24	; 4
	//Motor direction
	DDRB |= (1 << PB3) | (1 << PB4); //left motor
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	88 61       	ori	r24, 0x18	; 24
  90:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << PC4) | (1 << PC5); //right motor
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 63       	ori	r24, 0x30	; 48
  96:	87 b9       	out	0x07, r24	; 7
	// Power on indicator
	DDRB |= (1 << PB5); //Power on led indicator
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	84 b9       	out	0x04, r24	; 4
  9e:	08 95       	ret

000000a0 <power_on>:
#include <util/delay.h>

void power_on (void)
{
	int i;
	for (i = 0;i < 6;i++)
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	0f c0       	rjmp	.+30     	; 0xc4 <power_on+0x24>
	{
		PORTB ^= 1 << PB5; //Led off
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	89 27       	eor	r24, r25
  ac:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	81 ee       	ldi	r24, 0xE1	; 225
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <power_on+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <power_on+0x1e>
  be:	00 00       	nop
#include <util/delay.h>

void power_on (void)
{
	int i;
	for (i = 0;i < 6;i++)
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	26 30       	cpi	r18, 0x06	; 6
  c6:	31 05       	cpc	r19, r1
  c8:	74 f3       	brlt	.-36     	; 0xa6 <power_on+0x6>
	{
		PORTB ^= 1 << PB5; //Led off
		_delay_ms(100);
	}
  ca:	08 95       	ret

000000cc <main>:
#include "leds.h"
#include "motors.h"

int main(void)
{
	init_ports();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <init_ports>
	power_on();
  d0:	0e 94 50 00 	call	0xa0	; 0xa0 <power_on>
	init_timer1();
  d4:	0e 94 6f 00 	call	0xde	; 0xde <init_timer1>
	example_motors();
  d8:	0e 94 bd 00 	call	0x17a	; 0x17a <example_motors>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x10>

000000de <init_timer1>:
/****************************************************************
* Activa señal pwm para el control de velocidad
*****************************************************************/
void init_timer1()
{
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase Correct, 8-bit (pag.141 tabla 16.4)
  de:	e0 e8       	ldi	r30, 0x80	; 128
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);	//Envía nivel bajo por OC1A/OC1B(Pag.141 tabla 16.3)
  e8:	80 81       	ld	r24, Z
  ea:	80 6a       	ori	r24, 0xA0	; 160
  ec:	80 83       	st	Z, r24
										//when up-counting. Envía nivel alto por OC1A/OC1B on Compare
										//Match when downcounting(figura 16-8 pág.135)
	TCCR1B |= (1<<CS12)|(1<<CS10);	//frecuencia=fcpu/1024 ~ 15Khz (frecuencia para los motores)
  ee:	e1 e8       	ldi	r30, 0x81	; 129
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	85 60       	ori	r24, 0x05	; 5
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <motor_right>:
* MotorA(MOTOR_FORWARD,120);
*****************************************************************/
void motor_right(uint8_t dir,uint8_t speed)
{
	//Dirección
	if(dir == motor_stop)
  fa:	81 11       	cpse	r24, r1
  fc:	05 c0       	rjmp	.+10     	; 0x108 <motor_right+0xe>
	{
		PORTC &= 0 << PC4;
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	18 b8       	out	0x08, r1	; 8
		PORTC &= 0 << PC5;
 102:	88 b1       	in	r24, 0x08	; 8
 104:	18 b8       	out	0x08, r1	; 8
 106:	0f c0       	rjmp	.+30     	; 0x126 <motor_right+0x2c>
	}

	else if(dir == motor_backward)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	31 f4       	brne	.+12     	; 0x118 <motor_right+0x1e>
	{
		PORTC &= 0 << PC4;
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC5;
 110:	88 b1       	in	r24, 0x08	; 8
 112:	80 62       	ori	r24, 0x20	; 32
 114:	88 b9       	out	0x08, r24	; 8
 116:	07 c0       	rjmp	.+14     	; 0x126 <motor_right+0x2c>
	}
	else if(dir == motor_forward)
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	29 f4       	brne	.+10     	; 0x126 <motor_right+0x2c>
	{
		PORTC &= 0 << PC5;
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	18 b8       	out	0x08, r1	; 8
		PORTC |= 1 << PC4;
 120:	88 b1       	in	r24, 0x08	; 8
 122:	80 61       	ori	r24, 0x10	; 16
 124:	88 b9       	out	0x08, r24	; 8
	}

	//Velocidad
	uint8_t sreg = SREG;//Status Register
 126:	8f b7       	in	r24, 0x3f	; 63

	//cli();

	OCR1A = 13 + speed;//(uint8_t)(((float)(speed/240.0)*ROBO_SPEED));
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	63 5f       	subi	r22, 0xF3	; 243
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 132:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	SREG = sreg;
 136:	8f bf       	out	0x3f, r24	; 63
 138:	08 95       	ret

0000013a <motor_left>:
* MotorA(MOTOR_FORWARD,120);
*****************************************************************/
void motor_left(uint8_t dir,uint8_t speed)
{
	//Dirección
	if(dir == motor_stop)
 13a:	81 11       	cpse	r24, r1
 13c:	05 c0       	rjmp	.+10     	; 0x148 <motor_left+0xe>
	{
		PORTB &= 0 << PB3;
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	15 b8       	out	0x05, r1	; 5
		PORTB &= 0 << PB4;
 142:	85 b1       	in	r24, 0x05	; 5
 144:	15 b8       	out	0x05, r1	; 5
 146:	0f c0       	rjmp	.+30     	; 0x166 <motor_left+0x2c>
	}

	else if(dir == motor_backward)
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	31 f4       	brne	.+12     	; 0x158 <motor_left+0x1e>
	{
		PORTB &= 0 << PB3;
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB4;
 150:	85 b1       	in	r24, 0x05	; 5
 152:	80 61       	ori	r24, 0x10	; 16
 154:	85 b9       	out	0x05, r24	; 5
 156:	07 c0       	rjmp	.+14     	; 0x166 <motor_left+0x2c>
	}
	else if(dir == motor_forward)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	29 f4       	brne	.+10     	; 0x166 <motor_left+0x2c>
	{
		PORTB &= 0 << PB4;
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	15 b8       	out	0x05, r1	; 5
		PORTB |= 1 << PB3;
 160:	85 b1       	in	r24, 0x05	; 5
 162:	88 60       	ori	r24, 0x08	; 8
 164:	85 b9       	out	0x05, r24	; 5
	}

	//Velocidad
	uint8_t sreg = SREG;
 166:	8f b7       	in	r24, 0x3f	; 63

	//cli();

	OCR1B = 16 + speed;//(uint8_t)(((float)speed/240.0)*ROBO_SPEED));
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	60 5f       	subi	r22, 0xF0	; 240
 16c:	7f 4f       	sbci	r23, 0xFF	; 255
 16e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 172:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

	SREG = sreg;
 176:	8f bf       	out	0x3f, r24	; 63
 178:	08 95       	ret

0000017a <example_motors>:
}

void example_motors()
{
	motor_left(motor_forward,20);
 17a:	64 e1       	ldi	r22, 0x14	; 20
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 9d 00 	call	0x13a	; 0x13a <motor_left>
	motor_right(motor_forward,100);
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 7d 00 	call	0xfa	; 0xfa <motor_right>
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
