
sdk_2023_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008be  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000723  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d9  00000000  00000000  000012a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047c  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d2  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void)
{
    /* ports definition */
	init_ports();
  90:	0e 94 4d 00 	call	0x9a	; 0x9a <init_ports>
	//timer0_overflow_interrupt();
	//timer2_CTCmode();
	//timer1_CTCmode_interrupt();
	//timer1_CTCmode_nonPWM();
	//timer1_fastPWM_inverting();
	Timer2_PhaseCorrectPWMMode_Inverting();
  94:	0e 94 86 00 	call	0x10c	; 0x10c <Timer2_PhaseCorrectPWMMode_Inverting>
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x8>

0000009a <init_ports>:
#include <avr/io.h>

void init_ports (void)
{
	//Led poer/on
	DDRB |= 1 << PB5; //Pin 5 -> output
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	84 b9       	out	0x04, r24	; 4
	//test timer on CTC mode
	DDRB |= 1 << PB1; //OC1A -> output
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	84 b9       	out	0x04, r24	; 4
	//test timer on PWM mode
	DDRB |= 1 << PB3; //OC2A -> output
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	08 95       	ret

000000ae <__vector_16>:
	//Cuenta ICR1= 20ms/0.5us = 40,000
	//Por lo tanto ICR1= 39,999
	ICR1 = 39999;
	//Define ancho de pulso fijo
	//Cuenta OCR1= 2ms/0.5us= 4000
	OCR1A = ICR1 - 4000;
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	8d 37       	cpi	r24, 0x7D	; 125
  cc:	30 f0       	brcs	.+12     	; 0xda <__vector_16+0x2c>
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	89 27       	eor	r24, r25
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_11>:
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	89 27       	eor	r24, r25
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <Timer2_PhaseCorrectPWMMode_Inverting>:
}
void Timer2_PhaseCorrectPWMMode_Inverting(void)
{
	//Usa PB3 (OC2) como salida (definir PB3--> salida en IO_PORTs.c)
	//Define modo PHASE CORRECT PWM (tabla 42 pag.115)
	TCCR2A |= 1 << WGM20;
 10c:	e0 eb       	ldi	r30, 0xB0	; 176
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	//Clear when upcounting, Set when downcounting (tabla 45 pag.116)
	TCCR2A |= 1 << COM2A1;
 116:	80 81       	ld	r24, Z
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	80 83       	st	Z, r24
	//Prescaling fclk/128 (tabla 46 pag.116)
	//f=16,000,000/128= 125,000
	//T= 8 us
	TCCR2A |= (1 << CS22)|(1 << CS20);
 11c:	80 81       	ld	r24, Z
 11e:	85 60       	ori	r24, 0x05	; 5
 120:	80 83       	st	Z, r24
	OCR2A = 10;
 122:	8a e0       	ldi	r24, 0x0A	; 10
 124:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
