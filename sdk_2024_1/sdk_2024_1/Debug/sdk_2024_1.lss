
sdk_2024_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000398  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013e2  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000afe  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a73  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00002f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c1  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000093d  00000000  00000000  00003645  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003f82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_23>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  8e:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_23>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
  b8:	11 c0       	rjmp	.+34     	; 0xdc <__vector_23+0x46>
	//Realiza esta operación mientras voltaje de entrada > voltaje de referencia
	{
		lcd_i2c_col_row(1,2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_i2c_col_row>
		lcd_i2c_write_string("Comparando...");
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_i2c_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__vector_23+0x3a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <__vector_23+0x44>
  da:	00 00       	nop
#include <util/delay.h>
#include "lcd_i2c.h"

ISR(ANALOG_COMP_vect)
{
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
  dc:	00 b6       	in	r0, 0x30	; 48
  de:	05 fc       	sbrc	r0, 5
  e0:	ec cf       	rjmp	.-40     	; 0xba <__vector_23+0x24>
	{
		lcd_i2c_col_row(1,2);
		lcd_i2c_write_string("Comparando...");
		_delay_ms(200);
	}
	lcd_i2c_col_row(1,2);
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_i2c_col_row>
	lcd_i2c_write_string("             ");
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_i2c_write_string>
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
 114:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
 118:	84 e1       	ldi	r24, 0x14	; 20
 11a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 124:	08 95       	ret

00000126 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
 126:	84 ea       	ldi	r24, 0xA4	; 164
 128:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 12c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 130:	88 23       	and	r24, r24
 132:	e4 f7       	brge	.-8      	; 0x12c <start+0x6>
}
 134:	08 95       	ret

00000136 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
 136:	84 e9       	ldi	r24, 0x94	; 148
 138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13c:	8f e9       	ldi	r24, 0x9F	; 159
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <stop+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <stop+0x10>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte a escribir
 14a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
 14e:	84 ec       	ldi	r24, 0xC4	; 196
 150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
 154:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 158:	88 23       	and	r24, r24
 15a:	e4 f7       	brge	.-8      	; 0x154 <write_i2c+0xa>
}
 15c:	08 95       	ret

0000015e <lcd_i2c_reset>:
*	(pag.46 hoja de datos Hitachi 44780)
*/
void lcd_i2c_reset(void)
{
	//unsigned char dato;
	start();	//pulso START--> I2C
 15e:	0e 94 93 00 	call	0x126	; 0x126 <start>
	write_i2c(PCF8574_ADDR);
 162:	8e e4       	ldi	r24, 0x4E	; 78
 164:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
	
	write_i2c(0xFF); //Esperar al menos 15 ms
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <lcd_i2c_reset+0x16>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_i2c_reset+0x20>
 17e:	00 00       	nop
	_delay_ms(20);
	
	write_i2c(0x30+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=1
 180:	84 e3       	ldi	r24, 0x34	; 52
 182:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
	write_i2c(0x30);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=0
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_i2c_reset+0x32>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_i2c_reset+0x38>
 196:	00 00       	nop
	_delay_ms(10);			//Espera al menos 4.1 ms
	
	write_i2c(0x30+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=1
 198:	84 e3       	ldi	r24, 0x34	; 52
 19a:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
	write_i2c(0x30);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=0
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_i2c_reset+0x4a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_i2c_reset+0x50>
 1ae:	00 00       	nop
	_delay_ms(1);			//Espera al menos 100 us
	
	write_i2c(0x30+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=1
 1b0:	84 e3       	ldi	r24, 0x34	; 52
 1b2:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
	write_i2c(0x30);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 y E=0
 1b6:	80 e3       	ldi	r24, 0x30	; 48
 1b8:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_i2c_reset+0x62>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_i2c_reset+0x68>
 1c6:	00 00       	nop
	_delay_ms(1);			//Espera al menos 100 us
	
	write_i2c(0x20+LCD_EN); //Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=0 y E=1
 1c8:	84 e2       	ldi	r24, 0x24	; 36
 1ca:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
	write_i2c(0x20);		//Escribe Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=0 y E=0
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
 1d4:	8f e9       	ldi	r24, 0x9F	; 159
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_i2c_reset+0x7a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_i2c_reset+0x80>
 1de:	00 00       	nop
	_delay_ms(1);			//Espera al menos 100 us
	
	stop();	//pulso STOP--> I2C
 1e0:	0e 94 9b 00 	call	0x136	; 0x136 <stop>
 1e4:	08 95       	ret

000001e6 <lcd_i2c_cmd>:
}

/*	Escribe un comando al LCD	*/
void lcd_i2c_cmd (char cmd)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	c8 2f       	mov	r28, r24
	unsigned char data;
	start();	//pulso START--> I2C
 1ec:	0e 94 93 00 	call	0x126	; 0x126 <start>
	write_i2c(PCF8574_ADDR);
 1f0:	8e e4       	ldi	r24, 0x4E	; 78
 1f2:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
	//direccion del dispositivo
	
	data=(cmd & 0xF0)|LCD_EN|LUZ_FONDO;
 1f6:	dc 2f       	mov	r29, r28
 1f8:	d0 7f       	andi	r29, 0xF0	; 240
	write_i2c(data);
 1fa:	8d 2f       	mov	r24, r29
 1fc:	8c 60       	ori	r24, 0x0C	; 12
 1fe:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	data=(cmd & 0xF0)|LUZ_FONDO;
	write_i2c(data);
 202:	8d 2f       	mov	r24, r29
 204:	88 60       	ori	r24, 0x08	; 8
 206:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	data=((cmd << 4) & 0xF0)|LCD_EN|LUZ_FONDO;
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	c8 9f       	mul	r28, r24
 20e:	e0 01       	movw	r28, r0
 210:	11 24       	eor	r1, r1
	write_i2c(data);
 212:	8c 2f       	mov	r24, r28
 214:	8c 60       	ori	r24, 0x0C	; 12
 216:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	data=((cmd << 4) & (0xF0|LUZ_FONDO));
	write_i2c(data);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>
	
	stop();	//pulso STOP--> I2C
 220:	0e 94 9b 00 	call	0x136	; 0x136 <stop>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9f e1       	ldi	r25, 0x1F	; 31
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_i2c_cmd+0x42>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_i2c_cmd+0x48>
 22e:	00 00       	nop
 230:	8f e3       	ldi	r24, 0x3F	; 63
 232:	9f e1       	ldi	r25, 0x1F	; 31
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_i2c_cmd+0x4e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_i2c_cmd+0x54>
 23a:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <lcd_i2c_init>:

/*	Configura el LCD	*/
void lcd_i2c_init (void)
{
	init_i2c(); //****inicia interfaz I2C****
 242:	0e 94 8a 00 	call	0x114	; 0x114 <init_i2c>

	lcd_i2c_reset();	// Reset para el LCD.
 246:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_i2c_reset>
	
	lcd_i2c_cmd(0x2C);	// Function Set: Modo 4 bits, 2 líneas, resolución 5×10.
 24a:	8c e2       	ldi	r24, 0x2C	; 44
 24c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_i2c_cmd>
	//lcd_i2c_cmd(0x0F);	// Display control: LCD encendido, cursor encendido, parpadeo.
	lcd_i2c_cmd(0x0C);	//Cursor apagado.
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_i2c_cmd>
	lcd_i2c_cmd(0x06);	// Entry mode: Increment.
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_i2c_cmd>
	lcd_i2c_cmd(0x80);	// Apunta a la dirección de la DDRAM.
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_i2c_cmd>
 262:	08 95       	ret

00000264 <lcd_i2c_data>:
}


/*	Despliega un caracter	*/
void lcd_i2c_data (unsigned char dat)
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	c8 2f       	mov	r28, r24
	unsigned char data;
	start();	//pulso START--> I2C
 26a:	0e 94 93 00 	call	0x126	; 0x126 <start>
	write_i2c(PCF8574_ADDR);
 26e:	8e e4       	ldi	r24, 0x4E	; 78
 270:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	data=((dat & 0xF0)|LCD_EN|LCD_RS|LUZ_FONDO);
 274:	dc 2f       	mov	r29, r28
 276:	d0 7f       	andi	r29, 0xF0	; 240
	write_i2c(data);
 278:	8d 2f       	mov	r24, r29
 27a:	8d 60       	ori	r24, 0x0D	; 13
 27c:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	data=((dat & 0xF0)|LCD_RS|LUZ_FONDO);
	write_i2c(data);
 280:	8d 2f       	mov	r24, r29
 282:	89 60       	ori	r24, 0x09	; 9
 284:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	data=(((dat << 4) & 0xF0)|LCD_EN|LCD_RS|LUZ_FONDO);
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	c8 9f       	mul	r28, r24
 28c:	e0 01       	movw	r28, r0
 28e:	11 24       	eor	r1, r1
	write_i2c(data);
 290:	8c 2f       	mov	r24, r28
 292:	8d 60       	ori	r24, 0x0D	; 13
 294:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	data=(((dat << 4) & 0xF0)|LCD_RS|LUZ_FONDO);
	write_i2c(data);
 298:	8c 2f       	mov	r24, r28
 29a:	89 60       	ori	r24, 0x09	; 9
 29c:	0e 94 a5 00 	call	0x14a	; 0x14a <write_i2c>

	stop();	//pulso STOP--> I2C
 2a0:	0e 94 9b 00 	call	0x136	; 0x136 <stop>
 2a4:	8f e3       	ldi	r24, 0x3F	; 63
 2a6:	9f e1       	ldi	r25, 0x1F	; 31
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_i2c_data+0x44>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcd_i2c_data+0x4a>
 2ae:	00 00       	nop
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	9f e1       	ldi	r25, 0x1F	; 31
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_i2c_data+0x50>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_i2c_data+0x56>
 2ba:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <lcd_i2c_col_row>:

/* Posiciona el cursor en Columna y Renglón	*/
void lcd_i2c_col_row(uint8_t x, uint8_t y)
{
	lcd_i2c_cmd(0x80 + Columna_1[y-1]+(x-1));
 2c2:	e6 2f       	mov	r30, r22
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e1 50       	subi	r30, 0x01	; 1
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	90 81       	ld	r25, Z
 2cc:	89 0f       	add	r24, r25
 2ce:	81 58       	subi	r24, 0x81	; 129
 2d0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_i2c_cmd>
 2d4:	08 95       	ret

000002d6 <lcd_i2c_clr>:
}

/*	Limpia la pantalla	*/
void lcd_i2c_clr(void)
{
	lcd_i2c_cmd(0x01); //Limpia la pantalla (0000 0001)
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_i2c_cmd>
 2dc:	8f e3       	ldi	r24, 0x3F	; 63
 2de:	9f e1       	ldi	r25, 0x1F	; 31
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_i2c_clr+0xa>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_i2c_clr+0x10>
 2e6:	00 00       	nop
 2e8:	08 95       	ret

000002ea <lcd_i2c_write_string>:
	_delay_ms(2);
}

/*	Despliega una cadena de caracteres	*/
void lcd_i2c_write_string(char *a)
{
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	d0 e0       	ldi	r29, 0x00	; 0
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 2fa:	0e 94 32 01 	call	0x264	; 0x264 <lcd_i2c_data>

/*	Despliega una cadena de caracteres	*/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	f8 01       	movw	r30, r16
 302:	ec 0f       	add	r30, r28
 304:	fd 1f       	adc	r31, r29
 306:	80 81       	ld	r24, Z
 308:	81 11       	cpse	r24, r1
 30a:	f7 cf       	rjmp	.-18     	; 0x2fa <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	08 95       	ret

00000316 <led_on_off>:
#include <avr/io.h>
#include <util/delay.h>

void led_on_off(void)
{
	for(int i = 0; i < 5; i++)
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	19 c0       	rjmp	.+50     	; 0x34e <led_on_off+0x38>
	{
		PORTB |= 1 << PB5;
 31c:	85 b1       	in	r24, 0x05	; 5
 31e:	80 62       	ori	r24, 0x20	; 32
 320:	85 b9       	out	0x05, r24	; 5
 322:	4f ef       	ldi	r20, 0xFF	; 255
 324:	83 ec       	ldi	r24, 0xC3	; 195
 326:	99 e0       	ldi	r25, 0x09	; 9
 328:	41 50       	subi	r20, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <led_on_off+0x12>
 330:	00 c0       	rjmp	.+0      	; 0x332 <led_on_off+0x1c>
 332:	00 00       	nop
		_delay_ms(200);	
		PORTB &= 0 << PB5;
 334:	85 b1       	in	r24, 0x05	; 5
 336:	15 b8       	out	0x05, r1	; 5
 338:	4f ef       	ldi	r20, 0xFF	; 255
 33a:	83 ec       	ldi	r24, 0xC3	; 195
 33c:	99 e0       	ldi	r25, 0x09	; 9
 33e:	41 50       	subi	r20, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <led_on_off+0x28>
 346:	00 c0       	rjmp	.+0      	; 0x348 <led_on_off+0x32>
 348:	00 00       	nop
#include <avr/io.h>
#include <util/delay.h>

void led_on_off(void)
{
	for(int i = 0; i < 5; i++)
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	3f 4f       	sbci	r19, 0xFF	; 255
 34e:	25 30       	cpi	r18, 0x05	; 5
 350:	31 05       	cpc	r19, r1
 352:	24 f3       	brlt	.-56     	; 0x31c <led_on_off+0x6>
		PORTB |= 1 << PB5;
		_delay_ms(200);	
		PORTB &= 0 << PB5;
		_delay_ms(200);
	}
		PORTB &= 0 << PB5;
 354:	85 b1       	in	r24, 0x05	; 5
 356:	15 b8       	out	0x05, r1	; 5
 358:	08 95       	ret

0000035a <main>:
#include "lcd_i2c.h"

int main(void)
{
    /* Replace with your application code */
	init_ports();
 35a:	0e 94 c6 01 	call	0x38c	; 0x38c <init_ports>
	led_on_off();
 35e:	0e 94 8b 01 	call	0x316	; 0x316 <led_on_off>
	//init_analog_comp();
	/* lcd con interfaz I2C */
	lcd_i2c_init();
 362:	0e 94 21 01 	call	0x242	; 0x242 <lcd_i2c_init>
	lcd_i2c_clr();
 366:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_i2c_clr>
	lcd_i2c_col_row(1,1);
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_i2c_col_row>
	lcd_i2c_write_string("Todos...");
 372:	8e e1       	ldi	r24, 0x1E	; 30
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_i2c_write_string>
	lcd_i2c_col_row(1,2);
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_i2c_col_row>
	lcd_i2c_write_string("reprobados! ");
 382:	87 e2       	ldi	r24, 0x27	; 39
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_i2c_write_string>
 38a:	ff cf       	rjmp	.-2      	; 0x38a <main+0x30>

0000038c <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void)
{
	DDRB |= 1 << PB5;
 38c:	84 b1       	in	r24, 0x04	; 4
 38e:	80 62       	ori	r24, 0x20	; 32
 390:	84 b9       	out	0x04, r24	; 4
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
