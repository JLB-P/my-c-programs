
sdk_2024_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000989  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d4  00000000  00000000  00000c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049e  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e0  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017f  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_23>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 93 00 	call	0x126	; 0x126 <main>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_23>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "leds.h"

ISR(ANALOG_COMP_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	4f 93       	push	r20
  90:	5f 93       	push	r21
  92:	6f 93       	push	r22
  94:	7f 93       	push	r23
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	af 93       	push	r26
  9c:	bf 93       	push	r27
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
  a2:	04 c0       	rjmp	.+8      	; 0xac <__vector_23+0x2c>
	//Realiza esta operación mientras voltaje de entrada > voltaje de referencia
	{
		led_on_off();
  a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <led_on_off>
		led_on();	
  a8:	0e 94 8c 00 	call	0x118	; 0x118 <led_on>
#include <avr/interrupt.h>
#include "leds.h"

ISR(ANALOG_COMP_vect)
{
	while ((ACSR & (1<<ACO)) !=0) //ACO=1 cuando la AIN0 > AIN1(voltaje de referencia)
  ac:	00 b6       	in	r0, 0x30	; 48
  ae:	05 fc       	sbrc	r0, 5
  b0:	f9 cf       	rjmp	.-14     	; 0xa4 <__vector_23+0x24>
	//Realiza esta operación mientras voltaje de entrada > voltaje de referencia
	{
		led_on_off();
		led_on();	
	}
	led_off();
  b2:	0e 94 90 00 	call	0x120	; 0x120 <led_off>
}
  b6:	ff 91       	pop	r31
  b8:	ef 91       	pop	r30
  ba:	bf 91       	pop	r27
  bc:	af 91       	pop	r26
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	7f 91       	pop	r23
  c4:	6f 91       	pop	r22
  c6:	5f 91       	pop	r21
  c8:	4f 91       	pop	r20
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <led_on_off>:
#include <avr/io.h>
#include <avr/delay.h>

void led_on_off(void)
{
	for(int i = 0; i < 5; i++)
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	19 c0       	rjmp	.+50     	; 0x110 <led_on_off+0x38>
	{
		PORTB &= 0 << PB5;
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	4f ef       	ldi	r20, 0xFF	; 255
  e4:	83 e2       	ldi	r24, 0x23	; 35
  e6:	94 ef       	ldi	r25, 0xF4	; 244
  e8:	41 50       	subi	r20, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <led_on_off+0x10>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <led_on_off+0x1a>
  f2:	00 00       	nop
		_delay_ms(5000);
		PORTB |= 1 << PB5;
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	4f ef       	ldi	r20, 0xFF	; 255
  fc:	83 e2       	ldi	r24, 0x23	; 35
  fe:	94 ef       	ldi	r25, 0xF4	; 244
 100:	41 50       	subi	r20, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <led_on_off+0x28>
 108:	00 c0       	rjmp	.+0      	; 0x10a <led_on_off+0x32>
 10a:	00 00       	nop
#include <avr/io.h>
#include <avr/delay.h>

void led_on_off(void)
{
	for(int i = 0; i < 5; i++)
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	25 30       	cpi	r18, 0x05	; 5
 112:	31 05       	cpc	r19, r1
 114:	24 f3       	brlt	.-56     	; 0xde <led_on_off+0x6>
		PORTB &= 0 << PB5;
		_delay_ms(5000);
		PORTB |= 1 << PB5;
		_delay_ms(5000);	
	}
}
 116:	08 95       	ret

00000118 <led_on>:
void led_on(void)
{
	PORTB |= 1 << PB5;
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	08 95       	ret

00000120 <led_off>:
}
void led_off(void)
{
	PORTB &= 0 << PB5;
 120:	85 b1       	in	r24, 0x05	; 5
 122:	15 b8       	out	0x05, r1	; 5
 124:	08 95       	ret

00000126 <main>:
#include "leds.h"

int main(void)
{
    /* Replace with your application code */
	init_ports();
 126:	0e 94 98 00 	call	0x130	; 0x130 <init_ports>
	led_on_off();
 12a:	0e 94 6c 00 	call	0xd8	; 0xd8 <led_on_off>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x8>

00000130 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void)
{
	DDRB |= 1 << PB5;
 130:	84 b1       	in	r24, 0x04	; 4
 132:	80 62       	ori	r24, 0x20	; 32
 134:	84 b9       	out	0x04, r24	; 4
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
